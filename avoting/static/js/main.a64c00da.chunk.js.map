{"version":3,"sources":["app/hooks.ts","algosigner.ts","lib/utils.ts","lib/voting.ts","features/status/statusSlice.ts","features/newVoting/newVotingSlice.ts","features/newVoting/NewVoting.tsx","features/voting/votingSlice.ts","features/voting/Voting.tsx","features/status/Status.tsx","features/vote/voteSlice.ts","features/vote/Vote.tsx","App.tsx","app/store.ts","index.tsx","App.module.css"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","algoSigner","AlgoSigner","ledger","fromCharCode","String","encode","uint8array","output","i","length","push","btoa","join","makeHash","secret","v","createHash","update","digest","dapp","maxCandidates","votingDescriptionToString","d","str","nacl","randomBytes","title","replaceAll","endRound","JSON","stringify","scheme","candidates","hash","creator","slice","id","s","votingDescriptionFromString","ar","split","console","log","parseInt","boosted","parse","voteToString","votingId","mes","votes","voteFromString","map","sleep","milliseconds","Promise","resolve","setTimeout","waitConfirm","txId","a","indexer","path","catch","e","t","transactions","registerVoting","sender","duration","algod","params","description","txn","algosdk","makePaymentTxnWithSuggestedParamsFromObject","from","to","regAddress","amount","note","encoding","stringToByteArray","suggestedParams","fee","firstRound","lastRound","genesisHash","genesisID","flatFee","txn_b64","msgpackToBase64","toByte","signTxn","signedTxs","send","tx","blob","resp","sendVote","voteCreator","payment","boostVoting","findVoting","trs","atob","findVotes","addr","votingCreator","limit","next","sum","voteHistory","receiver","voteNote","voteItem","round","Math","min","findAllVotes","sums","voters","statusSlice","createSlice","name","initialState","accounts","account","processing","initialized","reducers","setAmount","state","action","payload","toString","setProcessing","setAccounts","findIndex","setAccount","actions","selectAmount","status","selectAccount","selectInitialized","selectAccounts","selectProcessing","requestStatus","dispatch","getState","address","data","makeRequest","rq","opts","res","noStatus","makeStatusRequest","alert","response","body","message","newVotingSlice","addCandidate","removeCandidate","splice","changeCandidate","ind","updateNewTitle","selectNewTitle","newVoting","selectNewScheme","NewVoting","navigate","useNavigate","Form","Card","Title","Group","controlId","style","margin","Control","type","placeholder","value","onChange","currentTarget","Body","InputGroup","className","Append","Text","cursor","onClick","Button","variant","preventDefault","marginTop","onDone","requestNewVoting","votingSlice","setVotingId","setVotingDescription","updateVotingState","selectVotingId","voting","selectVotingState","selectVotingDescription","requestGetVoting","Voting","props","useState","loadingRequested","setLoadingRequested","cutRound","setCutRound","cutBeginRound","cutPayment","setCutPayment","React","useEffect","useMemo","messages","sumCurrent","senders","sendersCurrent","maxPayment","voter","history","vSum","vSumCurrent","vote","j","makeData","marginBottom","ButtonGroup","float","color","marginLeft","step","max","bsPrefix","tooltipLabel","Container","Row","as","Col","width","Header","k","Toast","closeButton","Status","then","Fragment","ListGroup","Item","active","Spinner","animation","setVoterAndVoting","updateHistory","selectVoter","selectVoting","selectHistory","genVotesFromDescription","descr","Vote","useParams","setPayment","oldVotes","setOldVotes","setVotes","setMes","onDoneHistory","findLastMes","votingDesc","lastVote","disabled","tooltipPlacement","val","updateVote","Prepend","nextPayment","parseFloat","delta","updateVotesByPayment","requestSendVote","FormControl","ListVotings","ByAddress","App","algoSignerInit","setAlgoSignerInit","connect","styles","main","sm","element","store","configureStore","reducer","statusReducer","newVotingReducer","votingReducer","voteReducer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a64c00da.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","declare const AlgoSigner: any;\nexport function algoSigner() {\n  return AlgoSigner\n}\nexport const ledger = \"TestNet\"\n\n","import nacl from \"tweetnacl\"\nimport {createHash} from \"sha256-uint8array\"\n\nconst {fromCharCode} = String;\n\nexport const encode = (uint8array: Uint8Array) => {\n  const output = [];\n  for (let i = 0, {length} = uint8array; i < length; i++)\n    output.push(fromCharCode(uint8array[i]));\n  return btoa(output.join(''));\n}\nexport const decode = (chars: string) => Uint8Array.from(atob(chars), asCharCode);\n\nconst asCharCode = (c: string) => c.charCodeAt(0);\n\nexport function makeHash(secret: string) {\n  let v: Uint8Array = createHash().update(secret as any).digest()\n  v = createHash().update(v).digest()\n  return encode(v)\n}\n\nexport function makeHashIterate(secret: string | Uint8Array, k: number) {\n  let v: Uint8Array = createHash().update(secret as any).digest()\n  for( let i=0; i<k-1; ++i ) {\n    v = createHash().update(v).digest()\n  }\n  return v\n}\n\nexport function concatUint8Arrays(a1: Uint8Array, a2: Uint8Array) {\n  var tmp = new Uint8Array(a1.length + a2.length)\n  tmp.set(a1)\n  tmp.set(a2, a1.length)\n  return tmp;\n}\n\nexport function randomString(length: number): string {\n  return encode(nacl.randomBytes(length))\n}","import algosdk from \"algosdk\"\nimport dapp from \"../dapp.json\"\nimport {algoSigner, ledger} from \"../algosigner\"\nimport {makeHash, randomString} from \"./utils\"\nimport { selectProcessing } from \"../features/status/statusSlice\"\n\nexport const maxCandidates = dapp.maxCandidates\n\nexport interface VotingScheme {\n  candidates: string[],\n}\n\nexport interface VotingDescription {\n  creator: string,\n  scheme: VotingScheme,\n  title: string,\n  endRound: number,\n  boosted: boolean\n}\n\nexport interface VoteItem {\n  round: number, votes: number[], sum: number, mes: string\n}\n\nexport type VoteHistory = VoteItem[]\n\nexport type Voters = {[sender: string]: VoteHistory}\n\nexport type VotingState = Voters\n\nexport interface VotingData {\n  description: VotingDescription,\n  state: VotingState\n}\n\nfunction votingDescriptionToString(d: VotingDescription) {\n  let rand = randomString(5)\n  let str = rand + ':' + d.title.replaceAll(\":\", \"\")+\":\"+(d.endRound)+\":\"+JSON.stringify(d.scheme.candidates)\n  let hash = makeHash(d.creator+\":\"+str).slice(0,10)\n  return {\n    id: hash,\n    s: 'ltavoting:' + hash + ':' + str\n  }\n}\n\nfunction votingDescriptionFromString(creator: string, s: string): VotingDescription | null {\n  let ar = s.split(\":\")\n  if( ar[1]!=makeHash(creator+\":\"+ar.slice(2).join(\":\")).slice(0,10) ) {\n    console.log(\"Incorrect voting description: \"+creator+\", \"+s)\n    return null\n  }\n  let d: VotingDescription = {\n    creator,\n    title: ar[3],\n    endRound: parseInt(ar[4]) || 0,\n    scheme: {candidates:[]},\n    boosted: false\n  }\n  d.scheme.candidates = JSON.parse(ar.slice(5).join(\":\"))\n  return d\n}\n\nfunction voteToString(votingId: string, mes: string, votes: number[]) {\n  return 'ltavote:'+votingId+':'+votes.join(',')+':'+mes\n}\n\nfunction voteFromString(s: string): null | {\n  votes: number[],\n  mes: string\n} {\n  let ar = s.split(':')\n  return {\n    votes: ar[2].split(',').map(v=>parseInt(v)),\n    mes: ar.slice(3).join(':')\n  }\n}\n\nconst sleep = (milliseconds: number) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nasync function waitConfirm(txId: string) {\n  while(true) {\n    let t = await algoSigner().indexer({\n      ledger, path: '/v2/transactions?txid='+txId\n    }).catch((e: any)=>{console.log('any')})\n    if( t && t.transactions && t.transactions.length ) return\n    await sleep(1000)\n  }\n\n}\n\nexport async function registerVoting(sender: string, scheme: VotingScheme, title: string, duration: number) {\n  let params = await algoSigner().algod({\n    ledger, path: '/v2/transactions/params'\n  })\n  let endRound = params[\"last-round\"]+duration\n  if( !duration ) endRound = 0;\n  let {id, s: description} = votingDescriptionToString({creator: sender, endRound, title, scheme, boosted: false})\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: sender,\n    to: dapp.regAddress,\n    amount: 0,\n    note: algoSigner().encoding.stringToByteArray(description),\n    suggestedParams: {\n      fee: params[\"min-fee\"],\n      firstRound: params[\"last-round\"],\n      lastRound: params[\"last-round\"]+1000,\n      genesisHash: params[\"genesis-hash\"],\n      genesisID: params[\"genesis-id\"],\n      flatFee: true\n    }\n  })\n\n  let txn_b64 = algoSigner().encoding.msgpackToBase64(txn.toByte());\n\n  let signedTxs = await algoSigner().signTxn([{txn: txn_b64}])\n  let resp = await algoSigner().send({ledger, tx: signedTxs[0].blob})\n  let txId = resp && resp.txId\n  if( txId ) await waitConfirm(txId)\n  return txId//((resp && resp.txId) || \"\").slice(0,10)\n}\n/* while(true) {\n  let t = await algoSigner().indexer({\n    ledger, \n    path: \"/v2/accounts/\"+dapp.regAddress+\"/transactions?note-prefix=\"+btoa(\"ltavoting:\"+id+\":\")\n//        path: '/v2/transactions?txid='+txId\n  }).catch((e: any)=>{console.log('any')})\n  if( t && t.transactions && t.transactions.length ) break\n  await sleep(1000)\n}  \n */\nexport async function sendVote(sender: string, votingId: string, voteCreator: string, payment: number, votes: number[], mes: string) {\n  let params = await algoSigner().algod({\n    ledger, path: '/v2/transactions/params'\n  })\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: sender,\n    to: voteCreator,\n    amount: payment,\n    note: algoSigner().encoding.stringToByteArray(voteToString(votingId, mes, votes)),\n    suggestedParams: {\n      fee: params[\"min-fee\"],\n      firstRound: params[\"last-round\"],\n      lastRound: params[\"last-round\"]+1000,\n      genesisHash: params[\"genesis-hash\"],\n      genesisID: params[\"genesis-id\"],\n      flatFee: true\n    }\n  })\n\n  let txn_b64 = algoSigner().encoding.msgpackToBase64(txn.toByte());\n\n  let signedTxs = await algoSigner().signTxn([{txn: txn_b64}])\n  let resp = await algoSigner().send({ledger, tx: signedTxs[0].blob}).catch((e: any)=>{})\n  let txId = resp && resp.txId\n  if( txId ) await waitConfirm(txId)\n  return params[\"last-round\"]\n}\n\nexport async function boostVoting(sender: string, votingId: string) {\n  let params = await algoSigner().algod({\n    ledger, path: '/v2/transactions/params'\n  })\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: sender,\n    to: dapp.regAddress,\n    amount: 100000,\n    note: algoSigner().encoding.stringToByteArray(votingId),\n    suggestedParams: {\n      fee: params[\"min-fee\"],\n      firstRound: params[\"last-round\"],\n      lastRound: params[\"last-round\"]+1000,\n      genesisHash: params[\"genesis-hash\"],\n      genesisID: params[\"genesis-id\"],\n      flatFee: true\n    }\n  })\n\n  let txn_b64 = algoSigner().encoding.msgpackToBase64(txn.toByte());\n\n  let signedTxs = await algoSigner().signTxn([{txn: txn_b64}])\n  let resp = await algoSigner().send({ledger, tx: signedTxs[0].blob}).catch((e: any)=>{})\n  let txId = resp && resp.txId\n  if( txId ) await waitConfirm(txId)\n  return params[\"last-round\"]\n}\n\n\nexport async function findVoting(id: string): Promise<VotingDescription | null> {\n  let trs = await algoSigner().indexer({\n    ledger, \n    path: \"/v2/accounts/\"+dapp.regAddress+\"/transactions?txid=\"+id\n  })\n  console.log(trs)\n  let d: VotingDescription | null = null\n  for( let t of trs.transactions ) {\n    const sender = t['sender']\n    const note = atob(t['note'])\n    d = votingDescriptionFromString(sender, note)\n    if( d ) break\n  }\n  if( d ) {\n    let trs = await algoSigner().indexer({\n      ledger, \n      path: \"/v2/accounts/\"+dapp.regAddress+\"/transactions?currency-greater-than=\"+(100000-1)+\"&note-prefix=\"+btoa(id)\n    })\n    if( trs && trs.transactions && trs.transactions.length ) d.boosted = true\n  }\n  return d\n}\n\nexport async function findVotes(addr: string, id: string, votingCreator: string): Promise<VoteHistory | null> {\n  let limit = 1000;\n  let next = \"\"\n  let sum = 0\n  let voteHistory: VoteHistory = []\n  while(true) {\n    let trs = await algoSigner().indexer({\n      ledger, \n      path: \"/v2/accounts/\"+addr+\"/transactions?note-prefix=\"+\n      btoa(\"ltavote:\"+id+\":\")+(next ? \"&next=\"+next : \"\")\n    })\n    console.log(trs)\n    if( !trs.transactions || !trs.transactions.length ) {\n      if( !voteHistory.length ) return null\n      break;\n    }\n\n    for( let i=trs.transactions.length-1; i>=0; --i ) {\n      const t = trs.transactions[i]\n      const payment = t['payment-transaction'] || {}\n      const receiver = payment.receiver\n      if( receiver!=votingCreator ) continue\n      if( t.sender!=addr ) continue\n      const amount = payment.amount\n      const note = atob(t['note'])\n      const voteNote = voteFromString(note)\n      if( !voteNote ) continue\n      const {mes, votes} = voteNote\n      sum += amount\n      const voteItem: VoteItem = {\n        round: t['confirmed-round'],\n        votes: votes.map(v=>Math.min(v, sum)),\n        sum, mes\n      }\n      voteHistory.push(voteItem)\n    }\n    next = trs[\"next-token\"]\n    if( trs.transactions.length<limit ) break\n  }\n  return voteHistory\n}\n\nexport async function findAllVotes(id: string, votingCreator: string): Promise<Voters | null> {\n  let limit = 1000;\n  let sums: {[id: string]: number} = {}\n  let voters: Voters = {}\n  let next = \"\"\n  while( true ) {\n    let trs = await algoSigner().indexer({\n      ledger, \n      path: \"/v2/accounts/\"+votingCreator+\"/transactions?note-prefix=\"+\n      btoa(\"ltavote:\"+id+\":\")+(next ? \"&next=\"+next : \"\")\n    })\n    console.log(trs)\n    if( !trs || !trs.transactions ) return null\n\n    for( let i=trs.transactions.length-1; i>=0; --i ) {\n      const t = trs.transactions[i]\n      const payment = t['payment-transaction'] || {}\n      const sender = t.sender\n      const receiver = payment.receiver\n      if( receiver!=votingCreator ) continue\n\n      const amount = payment.amount\n      const note = atob(t['note'])\n      const voteNote = voteFromString(note)\n      if( !voteNote ) continue\n\n      let voteHistory = voters[sender] || []\n      voters[sender] = voteHistory\n      let sum = sums[sender] || 0\n      sum += amount\n      sums[sender] = sum\n\n      const {mes, votes} = voteNote\n      const voteItem: VoteItem = {\n        round: t['confirmed-round'],\n        votes: votes.map(v=>Math.min(v, sum)),\n        sum, mes\n      }\n      voteHistory.push(voteItem)\n    }\n    next = trs[\"next-token\"]\n    if( trs.transactions.length<limit ) break\n }\n  return voters\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport { algoSigner, ledger } from \"../../algosigner\"\n\nexport interface Status {\n  amount: string;\n  accounts: string[]\n  account: string;\n  processing: boolean;\n  initialized: boolean;\n}\n\nconst initialState: Status = {\n  amount: \"\",\n  accounts: [],\n  account: \"\",\n  processing: false,\n  initialized: false\n}\n\nfunction handleError(e: any) {\n  if( typeof e == \"string\" ) {\n    alert(e)\n  } else {\n    alert(e?.response?.body?.message || \"Request failed\")\n  }\n}\n\nexport const statusSlice = createSlice({\n  name: 'status',\n  initialState,\n  reducers: {\n/*     setFullDAppState: (state, action: PayloadAction<{amount: number, dappState: PassDAppState}>) => {\n      let {amount, dappState} = action.payload\n      state.amount = amount.toString()\n      state.dappState = dappState\n    },\n    setUnavailableStatus: (state, action: PayloadAction<void>) => {\n      state.amount = \"\"\n      state.dappState = null\n    },\n */\n    setAmount: (state, action: PayloadAction<number>) => {\n      state.initialized = true\n      state.amount = action.payload.toString()\n    },\n    setProcessing: (state, action: PayloadAction<boolean>) => {\n      state.processing = action.payload\n    },\n    setAccounts: (state, action: PayloadAction<string[]>) => {      \n      state.accounts = action.payload\n      if (state.accounts.length == 0) state.initialized = true\n      if( state.accounts.findIndex((v)=>v==state.account)==-1 ) {\n        state.account = state.accounts.length>0 ? state.accounts[0] : \"\"\n      }\n    },\n    setAccount: (state, action: PayloadAction<string>) => {\n      state.account = action.payload\n      if( state.accounts.findIndex((v)=>v==state.account)==-1 ) {\n        state.account = \"\"\n      }\n    },\n  },\n})\n\nexport const { setAmount, setProcessing, setAccounts, setAccount } = statusSlice.actions\n\nexport const selectAmount = (state: RootState) => state.status.amount\nexport const selectAccount = (state: RootState) => state.status.account\nexport const selectInitialized = (state: RootState) => state.status.initialized\nexport const selectAccounts = (state: RootState) => state.status.accounts\nexport const selectProcessing = (state: RootState) => state.status.processing\n\nexport const requestStatus = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAccount(getState())\n  if (address) {\n    let data = await algoSigner().indexer({ledger, path: \"/v2/accounts/\"+address})\n    if( data && data.account ) {\n      dispatch(setAmount(data.account.amount))\n    }\n  }\n};\n\nexport const makeRequest = <T = void>(rq: AppThunk<Promise<T>>, opts?: {noStatus?: boolean}): AppThunk<Promise<T>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    let res = await dispatch(rq)\n    if( !opts || !opts.noStatus ) {\n      await dispatch(requestStatus())\n    }\n    return res\n  } catch(e) {\n    throw e\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport const makeStatusRequest = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    await dispatch(requestStatus())\n  } catch(e: any) {\n    if( typeof e == \"string\" ) {\n      alert(e)\n    } else {\n      alert(e?.response?.body?.message || \"Request failed\")\n    }\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport default statusSlice.reducer;\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { VotingScheme, maxCandidates, registerVoting } from \"../../lib/voting\";\nimport { AppThunk, RootState } from '../../app/store'\nimport { selectAccount } from \"../status/statusSlice\"\nimport algosdk from \"algosdk\";\n\nexport interface NewVoting {\n  title: string;\n  scheme: VotingScheme;\n  duration: number;\n}\n\nconst initialState: NewVoting = {\n  title: \"A Voting\",\n  scheme: {candidates: [\"test1\", \"test2\"]},\n  duration: 5*60*1000\n};\n\nexport const newVotingSlice = createSlice({\n  name: 'newVoting',\n  initialState,\n  reducers: {\n    addCandidate: (state, action: PayloadAction<void>) => {\n      let candidates = [...state.scheme.candidates, \"\"]\n//      if (candidates.length >= maxCandidates) return\n      state.scheme = {...state.scheme, candidates}\n    },\n    removeCandidate: (state, action: PayloadAction<number>) => {\n      let candidates = [...state.scheme.candidates]\n      candidates.splice(action.payload, 1)\n      state.scheme = {...state.scheme, candidates}\n    },\n    changeCandidate: (state, action: PayloadAction<{ind: number, name: string}>) => {\n      let candidates = [...state.scheme.candidates]\n      candidates.splice(action.payload.ind, 1, action.payload.name)\n      state.scheme = {...state.scheme, candidates}\n    },\n    updateNewTitle: (state, action: PayloadAction<string>) => {\n      state.title = action.payload\n    },\n/*     updateDuration: (state, action: PayloadAction<Date>) => {\n      state.endDate = action.payload\n    }\n */  },\n});\n\nexport const { addCandidate, removeCandidate, changeCandidate/* , updateNewEndDate */, updateNewTitle } = newVotingSlice.actions\n\nexport const selectNewTitle = (state: RootState) => state.newVoting.title\nexport const selectNewScheme = (state: RootState) => state.newVoting.scheme\n//export const selectNewEndDate = (state: RootState) => state.newVoting.endDate\n\nexport const requestNewVoting = (scheme: VotingScheme, title: string, duration: number, onDone: (id: string)=>unknown): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  if( !account ) throw \"Account is not loaded\"\n  const id = await registerVoting(\n    account, scheme, title, duration\n  )\n  if( id ) setTimeout(()=>onDone(id), 1)\n};\n\n\nexport default newVotingSlice.reducer;\n","import { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\"\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectNewTitle,\n  selectNewScheme,\n  updateNewTitle,\n  removeCandidate,\n  changeCandidate,\n  addCandidate,\n  requestNewVoting\n} from './newVotingSlice';\nimport { Button, Form, InputGroup, Card } from 'react-bootstrap';\nimport { makeRequest } from '../status/statusSlice';\n\n\nexport function NewVoting() {\n  const title = useAppSelector(selectNewTitle)\n  const scheme = useAppSelector(selectNewScheme)\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n\n  return <Form>\n    <Card>\n      <Card.Title>\n        <Form.Group controlId=\"formTitle\" style={{margin: 10}}>\n          <Form.Control \n            type=\"text\" \n            placeholder=\"Enter title\" \n            value={title} \n            onChange={(e)=>dispatch(updateNewTitle(e.currentTarget.value))}\n          />\n        </Form.Group>\n      </Card.Title>\n      <Card.Body>\n        {\n          scheme.candidates.map(\n            (v, i) => <InputGroup className=\"mb-3\" key={i}>\n              <Form.Control \n                type=\"text\" \n                placeholder=\"Candidate's description\" \n                value={v} \n                onChange={(e)=>dispatch(changeCandidate({ind: i, name: e.currentTarget.value}))}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text style={{cursor: \"pointer\"}} onClick={()=>dispatch(removeCandidate(i))}>\n                  Remove\n                </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          )\n        }\n        <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n          e.preventDefault()\n          dispatch(addCandidate());\n        }}>\n          Add candidate\n        </Button>\n      </Card.Body>\n    </Card>\n    <Button variant=\"primary\" type=\"submit\" style={{marginTop: 20}} onClick={(e) => {\n        e.preventDefault()\n        dispatch(makeRequest(requestNewVoting(scheme, title, 0, (id)=>navigate(\"/avoting/\"+id))))\n      }}>\n      Register\n    </Button>\n  </Form>\n}\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { VotingDescription, VotingState, Voters, maxCandidates, registerVoting, findVoting, findAllVotes, boostVoting } from \"../../lib/voting\";\nimport { AppThunk, RootState } from '../../app/store'\nimport { selectAccount } from \"../status/statusSlice\"\nimport algosdk from \"algosdk\";\n\nexport interface Voting {\n  id: string;\n  description: VotingDescription | null;\n  state: VotingState | null;\n}\n\nconst initialState: Voting = {\n  id: \"\", description: null, state: null\n};\n\nexport const votingSlice = createSlice({\n  name: 'voting',\n  initialState,\n  reducers: {\n    setVotingId: (state, action: PayloadAction<string>) => {\n      if( state.id == action.payload ) return\n      state.id = action.payload\n      state.description = null\n      state.state = null\n    },\n    setVotingDescription: (state, action: PayloadAction<VotingDescription | null>) => {\n      state.description = action.payload\n    },\n    updateVotingState: (state, action: PayloadAction<VotingState | null>) => {\n      state.state = action.payload\n    },\n/*     updateDuration: (state, action: PayloadAction<Date>) => {\n      state.endDate = action.payload\n    }\n */  },\n});\n\nexport const { setVotingId, setVotingDescription, updateVotingState } = votingSlice.actions\n\nexport const selectVotingId = (state: RootState) => state.voting.id\nexport const selectVotingState = (state: RootState) => state.voting.state\nexport const selectVotingDescription = (state: RootState) => state.voting.description\n//export const selectNewEndDate = (state: RootState) => state.newVoting.endDate\n\nexport const requestGetVoting = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const id = selectVotingId(getState())\n  if( !id ) throw \"Voting is not loaded\"\n  const d = await findVoting(id)  \n  dispatch(setVotingDescription(d))\n  if( !d ) return\n  const voters = await findAllVotes(id, d.creator)\n  console.log(voters)\n  dispatch(updateVotingState(voters))\n}\n\nexport const requestBoost = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const d = selectVotingDescription(getState())\n  if( !account ) throw \"Account is not loaded\"\n  const id = selectVotingId(getState())\n  if( !id || !d ) throw \"Voting is not loaded\"\n  if( d.boosted ) throw \"Already boosted\"\n  await boostVoting(account, id)\n  dispatch(setVotingDescription({...d, boosted: true}))\n}\nexport default votingSlice.reducer;\n\n//Jrtyde6M1f\n","import { useState } from 'react';\nimport ReactBootstrapSlider from \"react-bootstrap-range-slider\"\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectVotingState,\n  selectVotingDescription,\n  setVotingDescription,\n  updateVotingState,\n  requestGetVoting,\n  setVotingId,\n  requestBoost\n} from './votingSlice';\nimport { Button, Form, InputGroup, Card, Container, Row, Col, Toast, ButtonGroup } from 'react-bootstrap';\nimport { makeRequest, selectAccount, selectInitialized, selectProcessing } from '../status/statusSlice';\nimport { useParams } from 'react-router';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { VotingDescription, VotingState } from '../../lib/voting';\n\n\ninterface VotingData {\n  votes: number[];\n  messages: {voter: string, amount: number, mes: string, round: number}[];\n  sum: number;\n  sumCurrent: number;\n  senders: number;\n  sendersCurrent: number;\n  firstRound: number;\n  lastRound: number;\n  maxPayment: number;\n}\n\nfunction makeData(state: VotingState, description: VotingDescription, cutRound: number, cutBeginRound: number, cutPayment: number): VotingData {\n  let votes = description.scheme.candidates.map(v=>0)\n  let messages: {voter: string, amount: number, mes: string, round: number}[] = []\n  let sum = 0\n  let sumCurrent = 0\n  let senders = 0\n  let sendersCurrent = 0\n  let firstRound = -1\n  let lastRound = -1\n  let maxPayment = 0\n\n  for( const voter in state ) {\n    const history = state[voter]\n    let vSum = 0\n    let vSumCurrent = 0\n    if( history.length ) {\n      if( firstRound==-1 || history[0].round<firstRound ) firstRound = history[0].round\n      if( lastRound==-1 || history[history.length-1].round>lastRound ) lastRound = history[history.length-1].round\n      vSum = history[history.length-1].sum\n    }\n    let i = history.length-1\n    for( ; i>=0; --i ) {\n      let vote = history[i]\n      if( cutRound && vote.round>cutRound ) continue\n      if( cutBeginRound && vote.round<cutBeginRound) continue\n      if( !vSumCurrent ) vSumCurrent = vote.sum\n      if( cutPayment ) vSumCurrent = Math.min(vSumCurrent, cutPayment)\n      for( let j in vote.votes ) {\n        votes[j] += Math.round(vote.votes[j] * (vSumCurrent / vote.sum))\n      }\n      break\n    }\n    for( ; i>=0; --i ) {\n      if( cutBeginRound && history[i].round<cutBeginRound) continue\n      if( !history[i].mes ) continue\n      messages.push({voter, amount: vSum, mes: history[i].mes, round: history[i].round})\n      break\n    }\n    if( vSum>0 ) ++senders\n    if( vSumCurrent>0 ) ++sendersCurrent\n    sum += vSum\n    sumCurrent += vSumCurrent\n    if( vSum>maxPayment ) maxPayment = vSum\n  }\n\n  return {votes, messages, sum, sumCurrent, senders, sendersCurrent, firstRound, lastRound, maxPayment}\n}\n\nexport function Voting(props: {id: string}) {\n  const {id} = props\n  const processing = useAppSelector(selectProcessing)\n  const account = useAppSelector(selectAccount)\n  const state = useAppSelector(selectVotingState)\n  const description = useAppSelector(selectVotingDescription)\n  const initialized = useAppSelector(selectInitialized)\n  const dispatch = useAppDispatch()\n  const [loadingRequested, setLoadingRequested] = useState(false)\n\n  const [cutRound, setCutRound] = useState(0)\n  const [cutBeginRound, setCutBeginRound] = useState(0)\n  const [cutPayment, setCutPayment] = useState(0)\n\n  React.useEffect(()=>{\n    setLoadingRequested(false)\n    dispatch(setVotingId(id))\n  }, [id])\n\n  React.useEffect(()=>{\n    if( !initialized || processing || loadingRequested ) return\n    setLoadingRequested(true)\n    dispatch(makeRequest(requestGetVoting()))\n  }, [initialized, processing, id])  \n\n\n  const data = React.useMemo(()=>state && description && makeData(state, description, cutRound, cutBeginRound, cutPayment), [state, description, cutRound, cutBeginRound, cutPayment])\n\n  if( !description || !data ) {\n    if( processing ) return null\n    return <div>Not found</div>\n  }\n  const {title, scheme, boosted} = description\n\n  return <div>\n    <Card style={{marginBottom: 10}}>\n      <Card.Title>\n        <ButtonGroup style={{float: \"right\"}}>\n          {\n            !boosted\n            ? <Button variant=\"danger\" onClick={(e) => {\n              e.preventDefault()\n              dispatch(makeRequest(requestBoost()))\n            }}>\n              Boost\n            </Button>\n            : <Button variant=\"success\">\n              Boosted\n            </Button>\n          }\n          <Button variant=\"secondary\" onClick={(e) => {\n            e.preventDefault()\n            dispatch(makeRequest(requestGetVoting()))\n          }}>\n            Refresh\n          </Button>\n        </ButtonGroup>\n        <h1 style={{margin: 10}}><Link to={\"/avoting/\"+id}>{title}</Link></h1>\n        <div title={description.creator} style={{color: \"gray\", marginLeft: 20}}>{\"by \"+description.creator.slice(0,15)+'...'}</div>\n      </Card.Title>\n      <Card.Body>\n        {\n          description.scheme.candidates.map(\n            (v, i) => <div key={i}>\n              {v}\n              <ReactBootstrapSlider\n                value={data.votes[i]||0}\n                step={1}\n                max={data.sumCurrent}\n                min={0}\n                bsPrefix=\"range-simple\"\n                tooltipLabel={(v)=>\"\"+v/1000000}\n              />\n            </div>\n          )\n        }\n      </Card.Body>\n    </Card>\n    <Container>\n      <Row as=\"dl\">\n        <Col as=\"dt\">\n          Total payments: \n        </Col>\n        <Col as=\"dd\">\n          { data.sum/1000000 + (data.sum!=data.sumCurrent?\"(\"+data.sumCurrent/1000000+\")\":\"\")}\n        </Col>\n      </Row>\n      <Row as=\"dl\">\n        <Col as=\"dt\">Voters: </Col>\n        <Col as=\"dd\">{ data.senders + (data.senders!=data.sendersCurrent?\"(\"+data.sendersCurrent+\")\":\"\")}</Col>\n      </Row>\n    </Container>\n    {\n      account && <Link to={\"/avoting/\"+id+\"/\"+account}>\n        <Button style={{width: \"30%\"}}>\n          Vote\n        </Button>\n      </Link>\n    }\n    {\n      !boosted ? <div style={{marginTop:30}}/> \n      : <Card style={{marginTop: 30, marginBottom: 30}}>\n        <Card.Header>Boosted features</Card.Header>\n        <Card.Body>\n          <div>\n            Timeline\n            <ReactBootstrapSlider\n              value={cutRound||data.lastRound}\n              onChange={(e, v)=>setCutRound(v)}\n              step={1}\n              max={data.lastRound}\n              min={data.firstRound}\n              bsPrefix=\"range-simple\"\n            />\n          </div>\n{/*           <div style={{marginTop:0}}>\n            Timeline (begin)\n            <ReactBootstrapSlider\n              value={cutBeginRound||data.firstRound}\n              onChange={(e, v)=>setCutBeginRound(v)}\n              step={1}\n              max={cutRound||data.lastRound}\n              min={data.firstRound}\n              bsPrefix=\"range-simple\"\n            />\n          </div>\n */}          <div style={{marginTop:20}}>\n            Limit payment value\n            <ReactBootstrapSlider\n              value={cutPayment||data.maxPayment}\n              onChange={(e, v)=>setCutPayment(v)}\n              step={1}\n              max={data.maxPayment}\n              min={1}\n              tooltipLabel={(v)=>\"\"+v/1000000}\n              bsPrefix=\"range-simple\"\n            />\n          </div>\n        </Card.Body>\n      </Card>\n    }\n    {\n      data.messages.map((v, k)=><Toast key={k}>\n        <Toast.Header closeButton={false}>\n          <strong className=\"mr-auto\">\n            <Link to={\"/avoting/\"+id+\"/\"+v.voter}>{v.voter.slice(0,15)+\"...\"}</Link>\n          </strong>\n          <small>{v.amount}</small>\n        </Toast.Header>\n        <Toast.Body>{v.mes}</Toast.Body>\n      </Toast>)\n    }\n  </div>\n}\n","import React from 'react'\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  makeStatusRequest,\n  selectAmount,\n  selectProcessing,\n  selectAccounts,\n  selectAccount,\n  setAccounts,\n  setAccount,\n  selectInitialized\n} from './statusSlice'\nimport styles from './Status.module.css'\nimport { algoSigner, ledger } from \"../../algosigner\"\nimport { Button, Card, Col, Container, Row, ListGroup, Spinner } from 'react-bootstrap'\nimport { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport function Status() {\n  const processing = useAppSelector(selectProcessing)\n  const amount = useAppSelector(selectAmount)\n  const address = useAppSelector(selectAccount)\n  const accounts = useAppSelector(selectAccounts)\n  const dispatch = useAppDispatch()\n\n  useEffect(()=>{\n     algoSigner().accounts({ledger}).then((d: any)=>{\n      dispatch(setAccounts(d.map((v: any)=>v.address)))\n      dispatch(makeStatusRequest())\n    })\n  }, [])\n\n  return <React.Fragment>\n      <Card>    \n      <Card.Body>\n        <Container>\n          <div style={{marginBottom:10}}>{ledger}</div>\n          <ListGroup style={{marginBottom: 20}}>\n            {\n              accounts.map((v, i)=><ListGroup.Item key={i}\n                style={address!=v ? {cursor: \"pointer\"} : {}}\n                active={address==v}\n                onClick={()=>{\n                  dispatch(setAccount(v))\n                  dispatch(makeStatusRequest())\n                }}\n              >\n                {v.slice(0,10)+\"...\"}\n              </ListGroup.Item>)\n            }\n          </ListGroup>\n          <Row as=\"dl\">\n            <Col as=\"dt\">Amount: </Col>\n            <Col as=\"dd\">{ amount==\"\" ? \"unknown\" : (parseInt(amount)||0)/1000000 }</Col>\n          </Row>\n          {\n  //          processing ? <div>processing...</div> : null\n          }\n        </Container>\n        <Button variant=\"primary\" type=\"submit\"\n        onClick={async (e) => {\n          e.preventDefault()\n          let d = await algoSigner().accounts({ledger})\n          dispatch(setAccounts(d.map((v: any)=>v.address)))\n          dispatch(makeStatusRequest())\n        }}>\n          Update\n        </Button>\n        <div style={{float: \"right\"}}>\n              {\n                processing \n                ? <Spinner animation=\"border\"/>\n                : null\n              }\n            </div>\n      </Card.Body>\n    </Card>\n    <div>\n      <Link to=\"/avoting\">New voting</Link>\n    </div>\n  </React.Fragment>\n}\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { VotingDescription, VotingState, maxCandidates, registerVoting, findVoting, VoteHistory, findVotes, sendVote } from \"../../lib/voting\";\nimport { AppThunk, RootState } from '../../app/store'\nimport { selectAccount } from \"../status/statusSlice\"\nimport algosdk from \"algosdk\";\nimport { requestGetVoting, selectVotingDescription, setVotingId } from \"../voting/votingSlice\";\n\nexport interface Vote {\n  voter: string;\n  voting: string;\n  history: VoteHistory | null;\n}\n\nconst initialState: Vote = {\n  voter: '', \n  voting: '',\n  history: null\n};\n\nexport const votingSlice = createSlice({\n  name: 'vote',\n  initialState,\n  reducers: {\n    setVoterAndVoting: (state, action: PayloadAction<{voter: string, voting: string}>) => {      \n      if( \n        state.voter != action.payload.voter ||\n        state.voting != action.payload.voting\n      ) {\n        state.history = null\n      }\n      state.voting = action.payload.voting\n      state.voter = action.payload.voter\n    },\n    updateHistory: (state, action: PayloadAction<VoteHistory | null>) => {\n      state.history = action.payload\n    },\n/*     updateDuration: (state, action: PayloadAction<Date>) => {\n      state.endDate = action.payload\n    }\n */  },\n});\n\nexport const { setVoterAndVoting, updateHistory } = votingSlice.actions\n\nexport const selectVoter = (state: RootState) => state.vote.voter\nexport const selectVoting = (state: RootState) => state.vote.voting\nexport const selectHistory = (state: RootState) => state.vote.history\n//export const selectNewEndDate = (state: RootState) => state.newVoting.endDate\n\nexport const requestVoteHistory = (onDone: (history: VoteHistory | null)=>unknown): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const voter = selectVoter(getState())\n  const voting = selectVoting(getState())\n\n  if( !voter || !voting ) throw \"Voting or voter is not loaded\"\n  dispatch(setVotingId(voting))\n  \n  let votingDesc = selectVotingDescription(getState())  \n  if( !votingDesc ) {\n    await requestGetVoting()(dispatch, getState, null)\n  }\n  votingDesc = selectVotingDescription(getState())  \n  if( !votingDesc) throw \"Voting description is not loaded\"\n\n  const voteHistory = await findVotes(voter, voting, votingDesc.creator)  \n  dispatch(updateHistory(voteHistory))\n  onDone(voteHistory)\n}\n\nexport const requestSendVote = (payment: number, votes: number[], mes: string, history: VoteHistory, onDone: (history: VoteHistory | null)=>unknown): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const voter = selectVoter(getState())\n  const voting = selectVoting(getState())\n  if( !voter || !voting || voter!=account ) throw \"Voting or voter is not loaded\"\n  let votingDesc = selectVotingDescription(getState())  \n  if( !votingDesc) throw \"Voting description is not loaded\"\n  \n  let round = await sendVote(account, voting, votingDesc.creator, payment, votes, mes)\n  history = [...history]\n  let sum = 0\n  if( history.length ) sum = history[history.length-1].sum\n  sum += payment\n  history.push({mes, votes, sum, round})\n  onDone(history)\n}\n\nexport default votingSlice.reducer;\n\n//Jrtyde6M1f\n","import React from 'react';\nimport { useState } from 'react';\nimport ReactBootstrapSlider from \"react-bootstrap-range-slider\"\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectVoter,\n  selectVoting,\n  selectHistory,\n  setVoterAndVoting,\n  requestVoteHistory,\n  requestSendVote\n} from './voteSlice';\nimport { Button, Form, InputGroup, Card, FormControl } from 'react-bootstrap';\nimport { makeRequest, selectAccount, selectInitialized, selectProcessing } from '../status/statusSlice';\nimport { useParams } from 'react-router';\nimport { selectVotingDescription, setVotingId } from '../voting/votingSlice';\nimport { VoteHistory, VoteItem, VotingDescription } from '../../lib/voting';\nimport { Link } from 'react-router-dom';\n\nfunction genVotesFromDescription(descr: VotingDescription): number[] {\n  return descr.scheme.candidates.map(v=>0)\n}\n\nfunction updateVotesByPayment(max: number, delta: number, votes: number[], descr: VotingDescription): number[] {\n  if( !votes.length ) votes = genVotesFromDescription(descr)\n  let res = [...votes]\n  for( let i in res ) {\n    if( delta>0 ) res[i] += delta\n    res[i] = Math.max(res[i], max)\n  }\n  return res\n}\n\nfunction updateVote(i: number, val: number, votes: number[], descr: VotingDescription): number[] {\n  if( !votes.length ) votes = genVotesFromDescription(descr)\n  if( votes[i]==val ) return votes\n  votes = [...votes]\n  votes[i] = val\n  return votes  \n}\n\nfunction findLastMes(history: VoteHistory | null) {\n  if( !history ) return \"\"\n  for( let i=history.length-1; i>=0; --i ) {\n    if( history[i].mes ) return history[i].mes    \n  }\n  return \"\"\n}\n\nexport function Vote() {\n  const {voter, voting} = useParams() || {}\n  const processing = useAppSelector(selectProcessing)  \n  const account = useAppSelector(selectAccount)\n  const description = useAppSelector(selectVotingDescription)\n  const initialized = useAppSelector(selectInitialized)\n  const history = useAppSelector(selectHistory)\n  const dispatch = useAppDispatch()  \n\n  const [payment, setPayment] = useState(10000)\n  const [oldVotes, setOldVotes] = useState<number[]>([])\n  const [votes, setVotes] = useState<number[]>([])\n  const [mes, setMes] = useState<string>(\"\")\n\n  React.useEffect(()=>{ setVotes([]); setOldVotes([]); setPayment(10000); setMes('') }, [voter])\n  React.useEffect(()=>{ setVotes([]); setPayment(10000); setMes(''); onDoneHistory(history) }, [account])\n\n  React.useEffect(()=>{\n    voter && voting && dispatch(setVoterAndVoting({voter, voting}))\n  }, [voter, voting])\n\n  const onDoneHistory = (history: VoteHistory | null) => {        \n    setOldVotes(history && history.length ? history[history.length-1].votes : [])\n    setVotes(history && history.length ? history[history.length-1].votes : [])\n    setMes(findLastMes(history))\n  }\n  const updateHistory = ()=>dispatch(makeRequest(requestVoteHistory(onDoneHistory)))\n\n  React.useEffect(()=>{\n    voter && voting && initialized && updateHistory()\n  }, [initialized, voter, voting])\n\n  if( !description || !voter || !voting ) {\n    if( processing ) return null\n    return <div>Not found</div>\n  }\n  const {title, scheme} = description\n\n  let lastVote: VoteItem | null = null\n  if( history && history.length ) lastVote = history[history.length - 1]\n  let sum = lastVote && lastVote.sum || 0\n\n  return <div>\n    <Card>\n      <Card.Title>\n        <Button style={{float: \"right\"}} variant=\"secondary\" onClick={(e) => {\n          e.preventDefault()\n          updateHistory()\n        }}>\n          Refresh\n        </Button>\n        <h1 style={{margin: 10}}><Link to={\"/avoting/\"+voting}>{title}</Link></h1>\n        <div title={voter} style={{color: \"gray\", marginLeft: 20}}>{\"vote of \"+voter.slice(0,15)+'...'}</div>\n      </Card.Title>\n      <Card.Body>\n        {\n          description.scheme.candidates.map(\n            (v, i) => <div key={i}>\n              {v}\n              {\n                oldVotes.length || account!=voter ? <ReactBootstrapSlider\n                  value={oldVotes[i]||0}\n                  step={1}\n                  max={sum+payment}\n                  min={0}\n                  disabled={true}\n                  tooltipPlacement=\"top\"\n                  bsPrefix=\"range-simple\"\n                  tooltipLabel={(v)=>\"\"+v/1000000}\n                /> : null\n              }\n              {\n                account==voter && <ReactBootstrapSlider\n                  value={votes[i]||0}\n                  onChange={(e, v)=>setVotes(updateVote(i, v, votes, description))}\n                  step={1}\n                  max={sum+payment}\n                  min={0}\n                  tooltipLabel={(v)=>\"\"+v/1000000}\n                  bsPrefix=\"range-simple\"\n                />\n              }\n            </div>\n          )\n        }\n      </Card.Body>\n    </Card>\n    {\n      account != voter\n      ? null\n      : <div>\n        <InputGroup className=\"mb-3\" style={{marginTop:20}}>\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              {sum/1000000 + \" + \"}\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <Form.Control \n            type=\"number\" \n            placeholder=\"Payment\" \n            value={payment/1000000} \n            onChange={(e)=>{\n              let nextPayment = parseFloat(e.currentTarget.value)*1000000||0\n              setPayment(nextPayment)\n              setVotes(updateVotesByPayment(sum+nextPayment, nextPayment-payment, votes, description))\n            }}\n          />\n          <InputGroup.Append>\n            <Button onClick={(e)=>{\n              dispatch(makeRequest(requestSendVote(payment, votes, mes, history || [], ()=>{\n                updateHistory()\n                setPayment(0)\n              })))\n            }}>\n              Send\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n        <InputGroup>\n          <FormControl as=\"textarea\" value={mes} placeholder=\"Message\" onChange={(e)=>setMes(e.currentTarget.value)}/>\n        </InputGroup>\n      </div>\n    }\n  </div>\n}\n","import React, { useState } from 'react'\nimport styles from './App.module.css'\nimport { NewVoting } from './features/newVoting/NewVoting'\nimport { Voting } from './features/voting/Voting'\nimport { Status } from './features/status/Status'\nimport { Col, Container, Row, Tab, Tabs } from 'react-bootstrap'\nimport classNames from \"classnames\"\nimport {algoSigner, ledger} from \"./algosigner\"\nimport { Routes, Route, Link, useParams } from \"react-router-dom\"\nimport { Vote } from './features/vote/Vote'\n\nfunction TabBase(props: {children: React.ReactNode}) {\n  return <div className={\n    classNames(\n      styles.tabBase, \n      \"border-bottom\", \"border-left\", \"border-right\"\n    )}>\n    {props.children}\n  </div>\n}\n\nfunction ListVotings() {\n  const params = useParams()\n  return <div>{\"List by sender \" + params.sender}</div>\n}\n\nfunction ByAddress() {\n  const params = useParams()\n  return <Voting id={params.addr||\"\"}/>\n}\n\nfunction App() {\n  const [algoSignerInit, setAlgoSignerInit] = useState(\"\")\n  React.useEffect(()=>{\n    setTimeout(\n      ()=>{\n        try {\n          if( !algoSigner() ) {\n            setAlgoSignerInit(\"error\")\n          }\n          algoSigner().connect().then(()=>{\n            setAlgoSignerInit(\"done\")\n          }).catch(()=>{\n            setAlgoSignerInit(\"error\")\n          })\n        } catch(e) {\n          setAlgoSignerInit(\"error\")\n        }    \n      }, 500\n    )\n  }, [])\n  if (algoSignerInit!=\"done\") {\n    return <div className={styles.main}>\n      <Container>\n        <Row>\n          <Col sm={12}>\n            {\n              algoSignerInit==\"no\" && \"Please install AlgoSigner\" ||\n              algoSignerInit==\"error\" && \"Please enable AlgoSigner on this page\"\n            }           \n          </Col>\n        </Row>\n      </Container>\n    </div>\n  }\n  return <div className={styles.main}>\n    <Container>\n      <Row>\n        <Col sm={3}>\n          <Status/>\n        </Col>\n        <Col sm={9}>\n          <Routes>\n            <Route path=\"avoting/\" element={<NewVoting/>}/>\n            <Route path=\"avoting/list/:sender\" element={<ListVotings/>}/>\n            <Route path=\"avoting/vote/:addr\" element={<ByAddress/>}/>\n            <Route path=\"avoting/:voting/:voter\" element={<Vote/>}/>\n            <Route path=\"avoting/:addr\" element={<ByAddress/>}/>\n          </Routes>\n        </Col>\n      </Row>\n    </Container>\n  </div>\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport statusReducer from '../features/status/statusSlice'\nimport newVotingReducer from '../features/newVoting/newVotingSlice'\nimport votingReducer from '../features/voting/votingSlice'\nimport voteReducer from '../features/vote/voteSlice'\n\nexport const store = configureStore({\n  reducer: {\n    status: statusReducer,\n    newVoting: newVotingReducer,\n    voting: votingReducer,\n    vote: voteReducer\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = Promise<void>> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\",\"tabBase\":\"App_tabBase__3Ir4k\"};"],"sourceRoot":""}