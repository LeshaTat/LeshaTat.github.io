{"version":3,"sources":["components/funcPanel.module.css","app/hooks.ts","features/algoclient/algoClientSlice.ts","features/algoclient/AlgoClient.tsx","lib/utils.ts","lib/passkit.ts","features/status/statusSlice.ts","lib/passreq.ts","features/contract/contractSlice.ts","features/account/accountSlice.ts","features/account/Account.tsx","features/status/Status.tsx","components/funcPanel.tsx","features/contract/Contract.tsx","features/auth/authSlice.ts","features/auth/Auth.tsx","App.tsx","app/store.ts","index.tsx","App.module.css","features/status/Status.module.css","features/contract/Contract.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","algoClientSlice","createSlice","name","initialState","purestake","token","host","hostIndexer","reducers","setTokenHostIndexer","state","action","payload","setPurestake","actions","selectHost","algorandClient","selectHostIndexer","selectToken","selectPurestake","selectAlgod","createSelector","url","URL","server","protocol","hostname","pathname","algosdk","Algodv2","parseInt","port","selectIndexer","Indexer","purestakeHost","purestakeHostIndexer","AlgorandClient","algod","dispatch","useState","hostCurrent","setHostCurrent","hostIndexerCurrent","setHostIndexerCurrent","tokenCurrent","setTokenCurrent","Form","Group","controlId","Check","type","checked","label","onChange","e","currentTarget","Label","Control","placeholder","value","disabled","Button","variant","onClick","preventDefault","a","status","do","alert","JSON","stringify","fromCharCode","String","encode","uint8array","output","i","length","push","btoa","join","decode","chars","Uint8Array","from","atob","asCharCode","c","charCodeAt","makeHashIterate","secret","k","v","createHash","update","digest","concatUint8Arrays","a1","a2","tmp","set","loadState","data","address","appId","some","el","id","apps","app","find","console","log","kvs","dict","kv","key","bytes","mark","counter","uint","makeSigs","account","prepareSig","makeLogicSig","dapp","prepare","confirmSig","confirm","confirmTxnSig","confirmTxn","cancelSig","cancel","sig","signProgram","sk","toByte","statusSlice","amount","dappState","processing","setFullDAppState","toString","setUnavailableStatus","setAmount","setProcessing","setAmountUnknown","selectAmount","selectProcessing","selectDAppState","requestStatus","getState","selectAddress","accountInformation","makeRequest","rq","opts","res","noStatus","makeStatusRequest","waitForConfirmation","txId","timeout","Error","startround","currentround","pendingTransactionInformation","undefined","pendingInfo","statusAfterBlock","optIn","getTransactionParams","suggestedParams","txn","makeApplicationOptInTxn","addr","sendRawTransaction","signTxn","clear","makeApplicationClearStateTxn","setup","passwd","strToObj","b","iteratesCount","makeApplicationNoOpTxn","encodeUint64","encodeObj","findCredentials","indexer","notePrefix","searchForTransactions","applicationID","txType","search","txs","transactions","tx","msg","decodeObj","note","slice","sigs","signLogicSigTransactionObject","logicSigFromByte","blob","makeConfirmTxn","confirmCTxn","ctxn","txID","lCTxn","lsigTxn","args","lTxn","contractSlice","setSigs","selectSigs","contract","requestSetupContract","selectAccount","accountSlice","mnemonic","setAddress","setMnemonic","mnemonicToSecretKey","selectMnemonic","setAddressMnemonicAndUpdateContract","oldAddress","setMnemonicUpdateAccount","Account","mnemonicCurrent","setMnemonicCurrent","newMnemonic","secretKeyToMnemonic","generateAccount","split","Status","Card","Body","className","styles","hostPlace","Container","Row","as","Col","statePlace","FuncPanel","props","funcPanel","children","SetupButton","setPasswd","setupButton","onSetup","generatePasswd","target","genPasswd","handleError","response","body","message","Contract","href","authSlice","currentRequest","setCurrentRequest","selectCurrentRequest","auth","selectPasswd","selectAvailableRequests","selectPasswdCheck","checkPasswd","makePaymentTxn","raddr","curTxn","makePaymentTxnWithSuggestedParamsFromObject","to","requestPrepare","kPrepare","secretConfirm","assignGroupID","decodeUnsignedTransaction","encodeUnsignedTransaction","groupCTxn","groupTxn","rawTxID","requestConfirm","requestLSigs","requestAuth","genTxn","onGroup","ButtonRequest","title","availableRequests","Auth","curPasswd","setCurPasswd","setRAddr","setTxn","setGroupTxn","setGroupCTxn","handleFind","useCallback","handlePrepare","handleConfirm","handleCancel","handleMake","Header","xs","style","display","justifyContent","flex","flexDirection","position","parse","TabBase","classNames","tabBase","App","main","sm","Tabs","defaultActiveKey","Tab","eventKey","store","configureStore","reducer","statusReducer","accountReducer","contractReducer","algorandClientReducer","authReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7619662d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"funcPanel\":\"funcPanel_funcPanel__3QdLC\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport algosdk from \"algosdk\";\n\nexport interface AlgoClient {\n  purestake: boolean;\n  token: string;\n  host: string;\n  hostIndexer: string;\n}\n\nconst initialState: AlgoClient = {\n  purestake: false,\n  token: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n  host: 'http://localhost:4001',\n  hostIndexer: 'http://localhost:8980'\n};\n\nexport const algoClientSlice = createSlice({\n  name: 'algorandClient',\n  initialState,\n  reducers: {\n    setTokenHostIndexer: (state, action: PayloadAction<{token: string, host: string, hostIndexer: string}>) => {\n      state.token = action.payload.token\n      state.host = action.payload.host\n      state.hostIndexer = action.payload.hostIndexer\n    },\n    setPurestake: (state, action: PayloadAction<boolean>) => {\n      state.purestake = action.payload\n    }\n  },\n});\n\nexport const { setTokenHostIndexer, setPurestake } = algoClientSlice.actions\n\nexport const selectHost = (state: RootState) => state.algorandClient.host\nexport const selectHostIndexer = (state: RootState) => state.algorandClient.hostIndexer\nexport const selectToken = (state: RootState) => state.algorandClient.token\nexport const selectPurestake = (state: RootState) => state.algorandClient.purestake\nexport const selectAlgod = createSelector(\n  selectHost,\n  selectToken,\n  selectPurestake,\n  (host, token, purestake) => {\n    let url = new URL(host)\n    let server = url.protocol+\"//\"+url.hostname+url.pathname    \n\n    return new algosdk.Algodv2(\n      purestake ? {\n        \"X-API-Key\": token\n      } : token, \n      server, parseInt(url.port)||\"\"\n    )\n  }\n)\nexport const selectIndexer = createSelector(  \n  selectHostIndexer,\n  selectToken,\n  selectPurestake,\n  (hostIndexer, token, purestake) => {\n    let url = new URL(hostIndexer)\n    let server = url.protocol+\"//\"+url.hostname+url.pathname    \n\n    return new algosdk.Indexer(\n      purestake ? {\n        \"X-API-Key\": token\n      } : token, \n      server, parseInt(url.port)||\"\"\n    )\n  }\n)\n\nexport default algoClientSlice.reducer;\n","import { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  setPurestake,\n  selectHost,\n  selectToken,\n  selectAlgod,\n  selectPurestake,\n  selectHostIndexer,\n  setTokenHostIndexer\n} from './algoClientSlice';\nimport { Button, Form } from 'react-bootstrap';\n\nconst purestakeHost = \"https://testnet-algorand.api.purestake.io/ps2\"\nconst purestakeHostIndexer = \"https://testnet-algorand.api.purestake.io/idx2\"\n\nexport function AlgorandClient() {\n  const host = useAppSelector(selectHost)\n  const hostIndexer = useAppSelector(selectHostIndexer)\n  const token = useAppSelector(selectToken)\n  const algod = useAppSelector(selectAlgod)\n  const purestake = useAppSelector(selectPurestake)\n  const dispatch = useAppDispatch()\n  const [hostCurrent, setHostCurrent] = useState(host)\n  const [hostIndexerCurrent, setHostIndexerCurrent] = useState(hostIndexer)\n  const [tokenCurrent, setTokenCurrent] = useState(token)\n\n  return <Form>\n    <Form.Group controlId=\"formPurestake\">\n      <Form.Check \n        type=\"checkbox\" \n        checked={purestake} \n        label=\"purestake\"\n        onChange={(e)=>dispatch(setPurestake(e.currentTarget.checked))}\n      />\n    </Form.Group>\n\n    <Form.Group controlId=\"formToken\">\n      <Form.Label>Token</Form.Label>\n      <Form.Control \n        type=\"text\" \n        placeholder=\"Enter token\" \n        value={tokenCurrent} \n        onChange={(e)=>setTokenCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n\n    <Form.Group controlId=\"formHost\">\n      <Form.Label>Algod</Form.Label>\n      <Form.Control \n        type=\"text\"\n        placeholder=\"Enter server host\" \n        disabled={purestake}\n        value={\n          purestake ? purestakeHost : hostCurrent\n        } \n        onChange={(e)=>setHostCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n    <Form.Group controlId=\"formHostIndexer\">\n      <Form.Label>Indexer</Form.Label>\n      <Form.Control \n        type=\"text\"\n        placeholder=\"Enter server host\" \n        disabled={purestake}\n        value={\n          purestake ? purestakeHostIndexer : hostIndexerCurrent\n        } \n        onChange={(e)=>setHostIndexerCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n\n    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n      e.preventDefault()\n      dispatch(setTokenHostIndexer({\n        token: tokenCurrent, \n        host: purestake ? purestakeHost : hostCurrent,\n        hostIndexer: purestake ? purestakeHostIndexer : hostIndexerCurrent\n      }));\n    }}>\n      Save\n    </Button>{' '}\n    <Button variant=\"primary\" type=\"submit\" onClick={async (e) => {\n      e.preventDefault()\n      let status = await algod.status().do()\n      alert(JSON.stringify(status))\n    }}>\n      Test\n    </Button>\n  </Form>\n}\n","import {createHash} from \"sha256-uint8array\"\n\nconst {fromCharCode} = String;\n\nexport const encode = (uint8array: Uint8Array) => {\n  const output = [];\n  for (let i = 0, {length} = uint8array; i < length; i++)\n    output.push(fromCharCode(uint8array[i]));\n  return btoa(output.join(''));\n}\nexport const decode = (chars: string) => Uint8Array.from(atob(chars), asCharCode);\n\nconst asCharCode = (c: string) => c.charCodeAt(0);\n\nexport function makeHashIterate(secret: string | Uint8Array, k: number) {\n  let v: Uint8Array = createHash().update(secret as any).digest()\n  for( let i=0; i<k-1; ++i ) {\n    v = createHash().update(v).digest()\n  }\n  return v\n}\n\nexport function concatUint8Arrays(a1: Uint8Array, a2: Uint8Array) {\n  var tmp = new Uint8Array(a1.length + a2.length)\n  tmp.set(a1)\n  tmp.set(a2, a1.length)\n  return tmp;\n}","import algosdk from \"algosdk\";\nimport dapp from \"../dapp.json\"\nimport { decode, encode, makeHashIterate } from \"./utils\";\n\ntype PassDAppSetupState = {\n  status: \"wait-setup\"\n}\n\ntype PassDAppPrepareState = {\n  status: \"wait-prepare\",\n  secret: string,\n  counter: number\n}\n\ntype PassDAppConfirmState = {\n  status: \"wait-confirm\",\n  mark: string,  \n  counter: number,\n  secret: string\n}\n\nexport type PassDAppState = {status: \"not-created\"} | {status: \"not-opted-in\"} | \nPassDAppSetupState | PassDAppPrepareState | PassDAppConfirmState\n\nexport type AuthRequest = string\n\n\nexport function checkAuthRequest(mark: string, state: PassDAppConfirmState) {\n  return mark==state.mark\n}\n\nexport function checkPasswd(appId: number, passwd: string, state: PassDAppState): boolean {\n  if( \n    state.status===\"not-created\" || \n    state.status===\"not-opted-in\" ||\n    state.status===\"wait-setup\"\n  ) return false\n  return encode(makeHashIterate(\n    passwd, state.counter\n  ))==state.secret\n}\n\ntype StateValue = {\n  bytes: string,\n  uint: number\n}\n\nexport function loadState(data: Record<string, any>, address: string, appId: number): PassDAppState {\n  if( !data ) return {status: \"not-created\"}\n  if( !data[\"created-apps\"] || !data[\"created-apps\"].some((el: any)=>el.id==appId)) {\n    return {status: \"not-created\"}\n  }\n  let apps = data[\"apps-local-state\"]\n  if( !apps ) {\n    return {status: \"not-opted-in\"}\n  }\n  let app = apps.find((el: any)=>el.id==appId)\n  if( !app ) {\n    return {status: \"not-opted-in\"}\n  }\n  console.log(app)\n  let kvs = app['key-value']\n  let dict: Record<string, StateValue> = {}\n  for( let i in kvs) {\n    let kv = kvs[i] \n    console.log(kv, atob(kv.key))\n    dict[atob(kv.key)] = kv.value\n  }\n  console.log(dict)\n  if( !dict.secret.bytes ) {\n    return {\n      status: \"wait-setup\"\n    }\n  } else if( dict.mark.bytes ) {\n    return {\n      status: \"wait-confirm\", \n      mark: dict.mark.bytes, \n      secret: dict.secret.bytes,\n      counter: dict.counter.uint\n    }\n  } else {\n    return {\n      status: \"wait-prepare\", \n      counter: dict.counter.uint,\n      secret: dict.secret.bytes\n    }\n  }\n//  \"bm9wZQ==\"\n  return {status: \"not-opted-in\"}\n}\n\nexport function getCounter(dappState: PassDAppState): number {\n  if( !dappState ) return 0\n  if( \n    dappState.status==\"not-created\" || \n    dappState.status==\"not-opted-in\" ||\n    dappState.status==\"wait-setup\"\n  ) {\n    return 0\n  }\n  return dappState.counter\n}\n\nexport function genPasswd() {\n  let passwd = algosdk.secretKeyToMnemonic(algosdk.generateAccount().sk)\n  passwd = passwd.split(\" \").slice(0, 4).join(\" \")\n  return passwd\n}\n\nexport type LogicSig = ReturnType<typeof algosdk.makeLogicSig>\n\nexport type Sigs = {\n  prepareSig: string;\n  confirmSig: string;\n  confirmTxnSig: string;\n  cancelSig: string;\n}\n\nexport function makeSigs(account: algosdk.Account): Sigs {\n  let prepareSig = algosdk.makeLogicSig(decode(dapp.prepare))\n  let confirmSig = algosdk.makeLogicSig(decode(dapp.confirm))\n  let confirmTxnSig = algosdk.makeLogicSig(decode(dapp.confirmTxn))\n  let cancelSig = algosdk.makeLogicSig(decode(dapp.cancel))\n\n  // LogicSig#sig(secret, msig) is broken: msig==undefined is not allowed by type system\n  prepareSig.sig = prepareSig.signProgram(account.sk)\n  confirmSig.sig = confirmSig.signProgram(account.sk)\n  confirmTxnSig.sig = confirmTxnSig.signProgram(account.sk)\n  cancelSig.sig = cancelSig.signProgram(account.sk)\n  return {\n    prepareSig: encode(prepareSig.toByte()),\n    confirmSig: encode(confirmSig.toByte()),\n    confirmTxnSig: encode(confirmTxnSig.toByte()),\n    cancelSig: encode(cancelSig.toByte())\n  }\n}\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport { loadState, PassDAppState } from \"../../lib/passkit\"\nimport { selectAddress } from \"../account/accountSlice\"\nimport { selectAlgod } from \"../algoclient/algoClientSlice\"\nimport { appId } from \"../../dapp.json\"\n\nexport interface Status {\n  amount: string;\n  dappState: null | PassDAppState;\n  processing: boolean;\n}\n\nconst initialState: Status = {\n  amount: \"\",\n  dappState: null,\n  processing: false\n}\n\nexport const statusSlice = createSlice({\n  name: 'status',\n  initialState,\n  reducers: {\n    setFullDAppState: (state, action: PayloadAction<{amount: number, dappState: PassDAppState}>) => {\n      let {amount, dappState} = action.payload\n      state.amount = amount.toString()\n      state.dappState = dappState\n    },\n    setUnavailableStatus: (state, action: PayloadAction<void>) => {\n      state.amount = \"\"\n      state.dappState = null\n    },\n    setAmount: (state, action: PayloadAction<number>) => {\n      state.amount = action.payload.toString()\n    },\n    setProcessing: (state, action: PayloadAction<boolean>) => {\n      state.processing = action.payload\n    },\n    setAmountUnknown: (state, action: PayloadAction<undefined>) => {\n      state.amount = \"\"\n    }\n  },\n})\n\nexport const { setAmount, setAmountUnknown, setFullDAppState, setUnavailableStatus, setProcessing } = statusSlice.actions\n\nexport const selectAmount = (state: RootState) => state.status.amount\nexport const selectProcessing = (state: RootState) => state.status.processing\nexport const selectDAppState = (state: RootState) => state.status.dappState\n\nexport const requestStatus = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  if (address) {\n    let data = await algod.accountInformation(address).do()\n    dispatch(setFullDAppState({amount: data.amount, dappState: loadState(data, address, appId)}))\n    dispatch(setAmount(data.amount))\n  }\n};\n\nexport const makeRequest = <T = void>(rq: AppThunk<Promise<T>>, opts?: {noStatus?: boolean}): AppThunk<Promise<T>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    let res = await dispatch(rq)\n    if( !opts || !opts.noStatus ) {\n      await dispatch(requestStatus())\n    }\n    return res\n  } catch(e) {\n    throw e\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport const makeStatusRequest = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    await dispatch(requestStatus())\n  } catch(e) {\n    throw e\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport default statusSlice.reducer;\n","import algosdk from \"algosdk\";\nimport { iteratesCount } from \"../features/contract/contractSlice\";\nimport { AuthRequest, makeSigs, Sigs } from \"./passkit\";\nimport { concatUint8Arrays, decode, encode, makeHashIterate } from \"./utils\";\n\n/**\n * utility function to wait on a transaction to be confirmed\n * the timeout parameter indicates how many rounds do you wish to check pending transactions for\n */\nasync function waitForConfirmation(algod: algosdk.Algodv2, txId: string, timeout: number) {\n  const status = await algod.status().do();\n  if (typeof status === 'undefined')\n    throw new Error('Unable to get node status');\n  const startround = status['last-round'];\n  let currentround = startround;\n\n  while (currentround < startround + timeout) {\n    const pendingInfo = await algod\n      .pendingTransactionInformation(txId)\n      .do();\n    if (pendingInfo !== undefined) {\n      if (\n        pendingInfo['confirmed-round'] !== null &&\n        pendingInfo['confirmed-round'] > 0\n      ) {\n        // Got the completed Transaction\n        // Wait for current block to be assimilated\n        \n        await algod.statusAfterBlock(currentround).do();\n        return pendingInfo;\n      }\n\n      if (\n        pendingInfo['pool-error'] != null &&\n        pendingInfo['pool-error'].length > 0\n      ) {\n        // If there was a pool error, then the transaction has been rejected!\n        throw new Error(\n          `Transaction Rejected pool error${pendingInfo['pool-error']}`\n        );\n      }\n    }\n    console.log('Waiting on round '+currentround)\n    await algod.statusAfterBlock(currentround).do();\n    currentround += 1;\n  }\n  /* eslint-enable no-await-in-loop */\n  throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n\nexport async function optIn(algod: algosdk.Algodv2, account: algosdk.Account, appId: number) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationOptInTxn(\n    account.addr, \n    suggestedParams, \n    appId\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  console.log('opted in')\n}\n\nexport async function clear(algod: algosdk.Algodv2, account: algosdk.Account, appId: number) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationClearStateTxn(\n    account.addr, \n    suggestedParams, \n    appId\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  console.log('cleared')\n}\n\nexport async function setup(\n  algod: algosdk.Algodv2, \n  account: algosdk.Account, \n  appId: number, \n  passwd: string\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let {\n    prepareSig, \n    confirmSig,\n    confirmTxnSig,\n    cancelSig\n  } = makeSigs(account)\n  const strToObj = (b: string) => decode(b)\n  const secret = makeHashIterate(passwd, iteratesCount)\n  let txn = algosdk.makeApplicationNoOpTxn(\n    account.addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"setup\")),\n      secret,\n      algosdk.encodeUint64(iteratesCount)\n    ], undefined, undefined, undefined,\n    concatUint8Arrays(\n      secret, algosdk.encodeObj({\n        address: account.addr,\n        prepare: strToObj(prepareSig), \n        confirm: strToObj(confirmSig), \n        confirmTxn: strToObj(confirmTxnSig), \n        cancel: strToObj(cancelSig)\n      })\n    )\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  \n  console.log('setup', passwd)\n  return passwd\n}\n\nexport async function findCredentials(\n  indexer: algosdk.Indexer, \n  appId: number, \n  passwd: string\n): Promise<{address: string, sigs: Sigs}> {\n  let notePrefix = makeHashIterate(passwd, iteratesCount)\n  let search = await indexer.searchForTransactions()\n  .applicationID(appId)\n  .txType(\"appl\")\n  .notePrefix(notePrefix).do()\n  let txs = search && search.transactions\n  if( !txs || txs.length==0 ) throw \"Password not found\"\n  let tx = txs[txs.length-1]\n  let msg: any = algosdk.decodeObj(decode(tx.note).slice(notePrefix.length))\n  return {\n    address: msg.address,\n    sigs: {\n      prepareSig: encode(msg.prepare),\n      confirmSig: encode(msg.confirm),\n      confirmTxnSig: encode(msg.confirmTxn),\n      cancelSig: encode(msg.cancel)\n    }\n  }\n}\n\nexport async function prepare(\n  algod: algosdk.Algodv2, \n  addr: string,\n  sigs: Sigs,\n  appId: number,\n  secret: Uint8Array,\n  mark: string\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"prepare\")),\n      secret,\n      decode(mark)\n    ]\n  )\n  const {txId} = await algod.sendRawTransaction(\n    algosdk.signLogicSigTransactionObject(\n      txn, \n      algosdk.logicSigFromByte(decode(sigs.prepareSig))\n    ).blob\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n  return\n}\n\nexport async function makeConfirmTxn(\n  algod: algosdk.Algodv2, \n  addr: string,\n  appId: number,\n  secret: Uint8Array,\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  return algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"confirm\")),\n      secret\n    ]\n  )\n}\n\nexport async function cancel(\n  algod: algosdk.Algodv2, \n  addr: string,\n  sigs: Sigs,\n  appId: number,\n  secret: Uint8Array\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"cancel\")),\n      secret\n    ]\n  )\n  const {txId} = await algod.sendRawTransaction(\n    algosdk.signLogicSigTransactionObject(\n      txn, \n      algosdk.logicSigFromByte(decode(sigs.cancelSig))\n    ).blob\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n}\n\nexport async function confirmCTxn(\n  algod: algosdk.Algodv2, \n  sigs: Sigs,\n  ctxn: algosdk.Transaction,\n  txn: algosdk.Transaction\n) {\n  console.log('ctxn: ', ctxn.txID())\n  let lCTxn = algosdk.signLogicSigTransactionObject(\n    ctxn, \n    algosdk.logicSigFromByte(decode(sigs.confirmSig))\n  ).blob\n  console.log('txn: ', txn.txID())\n  let lsigTxn = algosdk.logicSigFromByte(decode(sigs.confirmTxnSig))\n  // There is no method to change arg for LogicSig object.\n  // Do it manually.\n  lsigTxn.args = [algosdk.encodeUint64(0)]\n  let lTxn = algosdk.signLogicSigTransactionObject(\n    txn, \n    lsigTxn\n  ).blob\n  const {txId} = await algod.sendRawTransaction(\n    [lCTxn, lTxn]\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n  return\n}\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport { Sigs } from '../../lib/passkit'\nimport {appId} from \"../../dapp.json\"\nimport { selectAccount } from \"../account/accountSlice\"\nimport { selectAlgod } from \"../algoclient/algoClientSlice\"\nimport { selectDAppState } from \"../status/statusSlice\"\nimport { clear, optIn, setup } from \"../../lib/passreq\"\n\nexport const iteratesCount = 1000;\n\nexport interface Contract {\n  appId: null | number;\n  sigs: null | Sigs;\n}\n\nconst initialState: Contract = {\n  appId,\n  sigs: null\n}\n\nexport const contractSlice = createSlice({\n  name: 'contract',\n  initialState,\n  reducers: {\n    setSigs: (state, action: PayloadAction<Sigs | null>) => {\n      state.sigs = action.payload\n    }\n  },\n})\n\nexport const { setSigs } = contractSlice.actions\n\nexport const selectSigs = (state: RootState) => state.contract.sigs\n\nexport const requestOptIn = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  if( !account ) throw \"Account is not loaded\"\n  await optIn(algod, account, appId)\n};\n\nexport const requestClear = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  if( !account ) throw \"Account is not loaded\"\n  await clear(algod, account, appId)\n};\n\nexport const requestSetupContract = (passwd: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  const dappState = selectDAppState(getState())\n  if( !account ) throw \"Account is not loaded\"\n  if( !dappState ) throw \"App state is not loaded\"\n  if( dappState.status==\"not-created\" ) throw \"App is not created\"\n  if( dappState.status==\"not-opted-in\" ) throw \"App is not opted in\"\n  await setup(\n    algod, \n    account, \n    appId, \n    passwd\n  )\n};\n\nexport default contractSlice.reducer;\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport algosdk from \"algosdk\"\nimport { setSigs } from \"../contract/contractSlice\"\nimport { makeStatusRequest, setAmountUnknown } from \"../status/statusSlice\"\n\nexport interface AccountClient {\n  mnemonic: string;\n  address: string;\n}\n\nconst initialState: AccountClient = {\n  mnemonic: \"\",\n  address: \"\"\n}\n\nexport const accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    setAddress: (state, action: PayloadAction<string>) => {\n      if( state.address!=action.payload ) {\n        state.mnemonic = ''\n      }\n      state.address = action.payload      \n    },\n    setMnemonic: (state, action: PayloadAction<string>) => {\n      state.mnemonic = action.payload\n      state.address = algosdk.mnemonicToSecretKey(state.mnemonic).addr\n    },\n  },\n})\n\nexport const { setMnemonic, setAddress } = accountSlice.actions\n\nexport const selectMnemonic = (state: RootState) => state.account.mnemonic\nexport const selectAddress = (state: RootState) => state.account.address\nexport const selectAccount = createSelector(\n  selectMnemonic,\n  (mnemonic) => mnemonic ? algosdk.mnemonicToSecretKey(mnemonic) : null\n)\n\nexport const setAddressMnemonicAndUpdateContract = (payload: {\n  address?: string,\n  mnemonic?: string\n}): AppThunk => async (dispatch, getState) => {\n  let oldAddress = selectAddress(getState())\n  if( payload.mnemonic ) {\n    dispatch(setMnemonic(payload.mnemonic))\n  } else if( payload.address ) {\n    dispatch(setAddress(payload.address))\n  }\n  let newAddress = selectAddress(getState())\n  if( newAddress==oldAddress ) return\n  dispatch(setSigs(null))\n  dispatch(setAmountUnknown())\n}\n\nexport const setMnemonicUpdateAccount = (\n  payload: {mnemonic: string}\n): AppThunk => async (dispatch, getState) => {\n  let { mnemonic } = payload\n  dispatch(setAddressMnemonicAndUpdateContract({mnemonic}))\n  dispatch(makeStatusRequest())\n}\n\n\nexport default accountSlice.reducer;\n","import { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  setMnemonic,\n  selectMnemonic,\n  setMnemonicUpdateAccount\n} from './accountSlice';\nimport { Button, Form } from 'react-bootstrap';\nimport algosdk from \"algosdk\"\n\nexport function Account() {\n  const mnemonic = useAppSelector(selectMnemonic)\n  const dispatch = useAppDispatch()\n  const [mnemonicCurrent, setMnemonicCurrent] = useState(mnemonic)\n\n  return <div>    \n    <Form>\n      <Form.Group controlId=\"mnemonic\">\n        <Form.Label>Mnemonic</Form.Label>\n        <Form.Control \n          type=\"text\" \n          placeholder=\"Enter 25-words mnemonic phrase\" \n          value={mnemonicCurrent} \n          onChange={(e)=>setMnemonicCurrent(e.currentTarget.value)}\n        />\n      </Form.Group>\n\n      <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n        e.preventDefault()\n        let newMnemonic = algosdk.secretKeyToMnemonic(algosdk.generateAccount().sk)\n        setMnemonicCurrent(newMnemonic)\n        dispatch(setMnemonicUpdateAccount({mnemonic: newMnemonic}))\n      }}>\n        New\n      </Button>{' '}\n      <Button variant=\"primary\" type=\"submit\" disabled={mnemonicCurrent==mnemonic || mnemonicCurrent.split(' ').length!=25} onClick={(e) => {\n        e.preventDefault()\n        dispatch(setMnemonic(mnemonicCurrent))\n        dispatch(setMnemonicUpdateAccount({mnemonic: mnemonicCurrent}))\n      }}>\n        Save\n      </Button>{' '}\n    </Form>\n  </div>\n}\n","import { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  makeStatusRequest,\n  selectAmount,\n  selectDAppState,\n  selectProcessing,\n} from './statusSlice';\nimport {\n  selectAddress\n} from '../account/accountSlice';\nimport {\n  selectHost\n} from '../algoclient/algoClientSlice';\nimport styles from './Status.module.css';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\n\nexport function Status() {\n  const processing = useAppSelector(selectProcessing)\n  const amount = useAppSelector(selectAmount)\n  const address = useAppSelector(selectAddress)\n  const host = useAppSelector(selectHost)\n  const dappState = useAppSelector(selectDAppState)\n  const dispatch = useAppDispatch()\n\n  return <Card>    \n    <Card.Body>\n      <div className={styles.hostPlace}>\n        {host}\n      </div>\n      <Container>\n        <Row as=\"dl\">\n          <Col as=\"dt\">Address: </Col>\n          <Col as=\"dd\">{ address || \"unknown\" }</Col>\n          <Col as=\"dt\">Amount: </Col>\n          <Col as=\"dd\">{ amount==\"\" ? \"unknown\" : amount }</Col>\n        </Row>\n      </Container>\n      <pre className={styles.statePlace}>\n        {\n          processing\n          ? \"loading...\"\n          : dappState ? JSON.stringify(dappState, null, 4) : \"\"\n        }\n      </pre>\n      <Button variant=\"primary\" type=\"submit\" disabled={!address} \n      onClick={async (e) => {\n        e.preventDefault()\n        dispatch(makeStatusRequest())\n      }}>\n        Update\n      </Button>\n    </Card.Body>\n  </Card>\n}\n","import styles from './funcPanel.module.css'\n\nexport default function FuncPanel(props: {children: React.ReactNode}) {\n  return <div className={styles.funcPanel}>\n    {props.children}\n  </div>\n}","import { useState } from 'react'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  selectSigs,\n  requestSetupContract, requestOptIn, requestClear\n} from './contractSlice'\nimport {\n  selectAddress,\n} from '../account/accountSlice'\nimport styles from './Contract.module.css'\nimport { Button, Form } from 'react-bootstrap'\n\nimport { selectAlgod, selectPurestake } from '../algoclient/algoClientSlice'\nimport { selectAccount } from '../account/accountSlice'\n\nimport { genPasswd } from '../../lib/passkit'\nimport { makeRequest, selectDAppState } from '../status/statusSlice'\n\nimport FuncPanel from '../../components/funcPanel'\n\nexport function SetupButton(props: {onSetup: (passwd: string)=>void}) {\n  const [passwd, setPasswd] = useState<string>(\"\")\n  return <div className={styles.setupButton}>\n    <Button disabled={!passwd} onClick={()=>{\n      props.onSetup(passwd)\n    }}>\n      Setup\n    </Button>\n    <span className={styles.generatePasswd}>\n      <Form.Control \n      value={passwd} \n      onChange={(e)=>setPasswd(e.target.value)} \n      type=\"text\" placeholder=\"Enter password\"/>\n      <Button onClick={()=>setPasswd(genPasswd())}>\n        Generate\n      </Button>\n    </span>\n  </div>\n}\n\nfunction handleError(e: any) {\n  if( typeof e == \"string\" ) {\n    alert(e)\n  } else {\n    alert(e?.response?.body?.message || \"Failed\")\n  }\n}\n\nexport function Contract() {\n  const dispatch = useAppDispatch()\n  const algod = useAppSelector(selectAlgod)\n  const account = useAppSelector(selectAccount)\n  const purestake = useAppSelector(selectPurestake)\n\n  return <Form>    \n    <FuncPanel>\n      <Button\n      disabled={!account || !algod} \n      onClick={\n        async () => {\n          try {\n            await dispatch(makeRequest(requestOptIn()))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }>\n        Opt in\n      </Button>\n    </FuncPanel>\n    <FuncPanel>\n      <SetupButton onSetup={\n        async (passwd) => {\n          try {\n            await dispatch(makeRequest(requestSetupContract(passwd)))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }/>\n    </FuncPanel>\n    <FuncPanel>\n      <Button\n      disabled={!account || !algod} \n      onClick={\n        async () => {\n          try {\n            await dispatch(makeRequest(requestClear()))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }>\n        Clear\n      </Button>\n    </FuncPanel>\n    <FuncPanel>\n      {\n        purestake\n        ? <div>\n          You can get some algos to a newly created account on the following pages\n          <ul>\n            <li><a href=\"https://bank.testnet.algorand.network\">https://bank.testnet.algorand.network</a></li>\n            <li><a href=\"https://testnet.algoexplorer.io/dispenser\">https://testnet.algoexplorer.io/dispenser</a></li>\n          </ul>\n        </div>\n        : <div>\n          You can get some algos to a newly created account using Sandbox client. See example in the \n          article <a href=\"https://developer.algorand.org/articles/introducing-sandbox-20/\">Introducing Sandbox 2.0</a>.\n        </div>\n      }\n    </FuncPanel>\n  </Form>\n}\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport {  \n  checkAuthRequest,\n  checkPasswd\n} from '../../lib/passkit'\nimport algosdk from \"algosdk\"\nimport { selectAddress, setAddress } from \"../account/accountSlice\"\nimport { selectAlgod, selectIndexer } from \"../algoclient/algoClientSlice\"\nimport { selectSigs, setSigs } from \"../contract/contractSlice\"\nimport { makeRequest, selectDAppState } from \"../status/statusSlice\"\nimport { appId } from \"../../dapp.json\"\nimport { cancel, confirmCTxn, findCredentials, makeConfirmTxn, prepare } from \"../../lib/passreq\"\nimport { encode, makeHashIterate } from \"../../lib/utils\"\n\nexport type RequestType = \"find\" | \"prepare\" | \"confirm\" | \"cancel\"\n\nexport interface Auth { \n  passwd: string,\n  currentRequest: RequestType | null;\n}\n\nconst initialState: Auth = {\n  passwd: \"\",\n  currentRequest: null\n}\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setPasswd: (state, action: PayloadAction<string>) => {\n      state.passwd = action.payload\n    },\n    setCurrentRequest: (state, action: PayloadAction<RequestType | null>) => {\n      state.currentRequest = action.payload\n    },\n  },\n})\n\nexport const { setPasswd, setCurrentRequest } = authSlice.actions\n\nexport const selectCurrentRequest = (state: RootState) => state.auth.currentRequest\nexport const selectPasswd = (state: RootState) => state.auth.passwd\n\nexport type AvailableRequests = {[K in RequestType]?: boolean}\n\nexport const selectAvailableRequests = createSelector(\n  selectDAppState,\n  selectSigs,\n  (dappState, sigs): AvailableRequests => {\n    if( !sigs || !dappState ) return {find: true}\n    if( dappState.status===\"not-created\" ) return {}\n    if( dappState.status===\"not-opted-in\" ) return {find: true}\n    if( dappState.status===\"wait-setup\" ) return {find: true}\n    if( dappState.status===\"wait-prepare\" ) return {find: true, prepare: true}\n    if( dappState.status===\"wait-confirm\" ) return {find: true, confirm: true, cancel: true}\n    return {find: true, prepare: true, confirm: true, cancel: true}\n  }\n)\n\nexport const selectPasswdCheck = createSelector(\n  selectDAppState,\n  selectPasswd,\n  (dappState, passwd): boolean => {\n    if( !dappState ) return false\n    return checkPasswd(appId, passwd, dappState)\n  }\n)\n\n\nexport const makePaymentTxn = (raddr: string, amount: number): \nAppThunk<Promise<algosdk.Transaction>> => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  if( !amount ) throw \"Payment amount is not set\"\n  if( !raddr ) throw \"Receiver address is not set\"\n  const suggestedParams = await algod.getTransactionParams().do()\n  const curTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: raddr,\n    amount,\n    suggestedParams\n  })\n  return curTxn\n}\n\nexport const requestPrepare = (txn: algosdk.Transaction): \nAppThunk<Promise<{groupCTxn: algosdk.Transaction, groupTxn: algosdk.Transaction}>> => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  const passwd = selectPasswd(getState())\n  if( !sigs ) throw \"Credentials were not set\"\n  if( !dappState || dappState.status!=\"wait-prepare\" ) throw \"Incorrect contract local state\"\n  dispatch(setCurrentRequest('prepare'))\n  try {\n    let kPrepare = dappState.counter - dappState.counter%3\n    let kConfirm = kPrepare - 2\n    let secretConfirm = makeHashIterate(passwd, kConfirm)\n    let ctxn = await makeConfirmTxn(\n      algod, address, appId, \n      secretConfirm\n    )\n    let [groupCTxn, groupTxn] = algosdk.assignGroupID([\n      ctxn,\n      // Do not mutate initial txn object\n      algosdk.decodeUnsignedTransaction(\n        algosdk.encodeUnsignedTransaction(txn)\n      )\n    ])\n\n    await prepare(\n      algod, \n      address, \n      sigs, \n      appId, \n      makeHashIterate(secretConfirm, 2),\n      encode(groupCTxn.rawTxID())\n    )\n    return {groupCTxn, groupTxn}\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestConfirm = (\n  groupCTxn: algosdk.Transaction, \n  groupTxn: algosdk.Transaction\n): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  if( !sigs ) throw \"Signatures not loaded\"\n  if( !dappState || dappState.status!==\"wait-confirm\" ) throw \"Not waiting for confirmation\"\n  if( !checkAuthRequest(\n    encode(groupCTxn.rawTxID()),\n    dappState\n  ) ) throw \"State check failed: it is not safe to proceed\"\n\n  dispatch(setCurrentRequest(\"confirm\"))\n  try {\n    await confirmCTxn(\n          algod, \n          sigs,\n          groupCTxn,\n          groupTxn\n    )\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestCancel = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  const passwd = selectPasswd(getState())\n  if( !sigs ) throw \"Signatures not loaded\"\n  if( !dappState || dappState.status!==\"wait-confirm\" ) throw \"Not waiting for confirmation\"\n  dispatch(setCurrentRequest(\"cancel\"))\n  try {\n    await cancel(\n      algod, \n      address, \n      sigs, \n      appId, \n      makeHashIterate(passwd, dappState.counter-1),\n    )\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestLSigs = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const indexer: algosdk.Indexer = selectIndexer(getState())\n  const passwd = selectPasswd(getState())\n  dispatch(setCurrentRequest(\"find\"))\n  try {\n    const {address, sigs} =  await findCredentials(\n      indexer, \n      appId,\n      passwd\n    )\n    dispatch(setAddress(address))\n    dispatch(setSigs(sigs))\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestAuth = (\n  genTxn: (address: string) => Promise<algosdk.Transaction>,\n  onGroup?: (groupCTxn: algosdk.Transaction, groupTxn: algosdk.Transaction) => void\n): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const sigs = selectSigs(getState())\n  if( !sigs || !selectPasswdCheck(getState()) ) {\n    await dispatch(makeRequest(requestLSigs()))\n  }\n  const address = selectAddress(getState())\n  let {groupCTxn, groupTxn} = await dispatch(makeRequest(\n    requestPrepare(await genTxn(address))\n  ))\n  onGroup?.(groupCTxn, groupTxn)\n\n  await dispatch(makeRequest(requestConfirm(groupCTxn, groupTxn)))\n}\n\nexport default authSlice.reducer;\n","import { useCallback, useState } from 'react'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  AvailableRequests,\n  makePaymentTxn,\n  requestAuth,\n  requestCancel,\n  requestConfirm,\n  requestLSigs,\n  requestPrepare,\n  RequestType,\n  selectAvailableRequests,\n  selectCurrentRequest,\n  selectPasswd,\n  setPasswd\n} from './authSlice'\nimport {\n  selectAddress,\n} from '../account/accountSlice'\nimport { Button, Form, Card, Container, Row, Col } from 'react-bootstrap'\n\nimport { makeRequest } from '../status/statusSlice'\n\nimport FuncPanel from \"../../components/funcPanel\"\n\nimport algosdk from 'algosdk'\nimport { encode } from '../../lib/utils'\n\nfunction handleError(e: any) {\n  if( typeof e == \"string\" ) {\n    alert(e)\n  } else {\n    alert(e?.response?.body?.message || \"Request failed\")\n  }\n}\n\nfunction ButtonRequest(props: {\n  title: string, \n  type: RequestType,\n  availableRequests: AvailableRequests,\n  currentRequest: RequestType | null,\n  onClick: ()=>void\n}) {\n  let {title, type, availableRequests, currentRequest, onClick} = props\n  return <Button \n  disabled={!availableRequests[type] || !!currentRequest} \n  onClick={onClick}\n  variant={type==currentRequest ? \"outline-primary\" : \"primary\"}>\n    { title }\n  </Button>\n}\n\nexport function Auth() {\n  const dispatch = useAppDispatch()\n  const address = useAppSelector(selectAddress)\n  const availableRequests = useAppSelector(selectAvailableRequests)\n  const currentRequest = useAppSelector(selectCurrentRequest)\n  const passwd = useAppSelector(selectPasswd)\n\n  const [curPasswd, setCurPasswd] = useState<string>(passwd)\n\n  const [raddr, setRAddr] = useState<string>(\"QC7XT7QU7X6IHNRJZBR67RBMKCAPH67PCSX4LYH4QKVSQ7DQZ32PG5HSVQ\")\n  const [amount, setAmount] = useState<number>(110000)\n  const [txn, setTxn] = useState<null | algosdk.Transaction>(null)\n  const [groupTxn, setGroupTxn] = useState<null | algosdk.Transaction>(null)\n  const [groupCTxn, setGroupCTxn] = useState<null | algosdk.Transaction>(null)\n\n  const handleFind = useCallback(\n    async () => {\n      if( !curPasswd ) return\n      if( curPasswd!=passwd ) dispatch(setPasswd(curPasswd))\n      try {\n        await dispatch(makeRequest(requestLSigs()))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [txn, curPasswd]\n  )\n\n  const handlePrepare = useCallback(\n    async () => {\n      if( !raddr ) return\n      try {\n        if( curPasswd!=passwd ) dispatch(setPasswd(curPasswd))\n        const curTxn = await dispatch(makePaymentTxn(raddr, amount))\n        setTxn(curTxn)\n        let {groupCTxn, groupTxn} = await dispatch(makeRequest(\n          requestPrepare(curTxn)\n        ))\n        setGroupCTxn(groupCTxn)\n        setGroupTxn(groupTxn)\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [curPasswd, address, raddr, amount]\n  )\n\n  const handleConfirm = useCallback(\n    async () => {\n      if( curPasswd!=passwd ) dispatch(setPasswd(curPasswd))\n      if( !groupCTxn || !groupTxn ) return\n      try {\n        await dispatch(makeRequest(requestConfirm(groupCTxn, groupTxn)))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [groupCTxn, groupTxn, curPasswd]\n  )\n\n  const handleCancel = useCallback(\n    async () => {\n      if( curPasswd!=passwd ) dispatch(setPasswd(curPasswd))\n      if( !curPasswd ) return\n      try {\n        await dispatch(makeRequest(requestCancel()))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [passwd]\n  )\n\n  const handleMake = useCallback(\n    async () => {\n      try {\n        if( !curPasswd ) throw \"Passwd is not set\"\n        if( curPasswd!=passwd ) dispatch(setPasswd(curPasswd))\n        await dispatch(requestAuth(\n          async () => {\n            const curTxn = await dispatch(makePaymentTxn(raddr, amount))\n            setTxn(curTxn)\n            setGroupCTxn(null)\n            setGroupTxn(null)\n            return curTxn\n          },\n          (groupCTxn, groupTxn) => {\n            setGroupCTxn(groupCTxn)\n            setGroupTxn(groupTxn)\n          }\n        ))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [txn, curPasswd, amount, raddr]\n  )\n  return <Container>\n    <Row>\n      <Col>\n        <Form.Control \n        value={curPasswd} \n        onChange={(e)=>setCurPasswd(e.target.value)} \n        type=\"text\" placeholder=\"Enter password\"/>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <FuncPanel>\n          <Card>\n            <Card.Header>\n              <Button onClick={handleMake}>\n                Make Payment Transaction\n              </Button>\n            </Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group controlId=\"formBasicAddress\">\n                  <Form.Label>Recepient address</Form.Label>\n                  <Form.Control \n                  type=\"text\" \n                  placeholder=\"XYZ...\" \n                  value={raddr}\n                  onChange={e=>setRAddr(e.target.value)}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicAmount\">\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control \n                  type=\"number\" \n                  placeholder=\"Amount\" \n                  value={amount?.toString()||0}\n                  onChange={e=>setAmount(parseInt(e.target.value)||0)}\n                  />\n                </Form.Group>\n              </Form>\n            </Card.Body>\n          </Card>\n        </FuncPanel>\n      </Col>\n      <Col xs=\"auto\" style={{display: \"flex\"}}>\n        <div style={{display: \"flex\", justifyContent: \"center\", flex: 1, flexDirection: \"column\"}}>\n          <FuncPanel>\n            1. <ButtonRequest \n              type=\"find\"\n              title=\"Find credentials\"\n              onClick={handleFind} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            2. <ButtonRequest \n              type=\"prepare\"\n              title=\"Prepare\"\n              onClick={handlePrepare} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            3. <ButtonRequest \n              type=\"confirm\"\n              title=\"Confirm\"\n              onClick={handleConfirm} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            3<span style={{position: 'absolute'}}>*</span>. <ButtonRequest \n              type=\"cancel\"\n              title=\"Cancel\"\n              onClick={handleCancel} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n        </div>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Card>\n          <Card.Header>\n            Transaction Content\n          </Card.Header>\n          <Card.Body>\n            <div>\n              {txn?.txID()}\n            </div>\n            <div>\n              {\n                groupTxn \n                ? \"Raw TxID in group: \"+encode(groupTxn.rawTxID())\n                : \"\"\n              }\n            </div>\n            <pre>\n              {JSON.stringify(JSON.parse(txn?.toString()||\"{}\"), null, 2)}\n            </pre>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  </Container>\n}\n","import React from 'react'\nimport styles from './App.module.css'\nimport { AlgorandClient } from './features/algoclient/AlgoClient'\nimport { Account } from './features/account/Account'\nimport { Status } from './features/status/Status'\nimport { Contract } from './features/contract/Contract'\nimport { Auth } from './features/auth/Auth'\nimport { Col, Container, Row, Tab, Tabs } from 'react-bootstrap'\nimport classNames from \"classnames\"\n\nfunction TabBase(props: {children: React.ReactNode}) {\n  return <div className={\n    classNames(\n      styles.tabBase, \n      \"border-bottom\", \"border-left\", \"border-right\"\n    )}>\n    {props.children}\n  </div>\n}\n\nfunction App() {\n  return <div className={styles.main}>\n    <Container>\n      <Row>\n        <Col><h3>Algorand PassDApp</h3></Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Status/>\n        </Col>\n        <Col sm={9}>\n          <Tabs defaultActiveKey=\"auth\">\n            <Tab eventKey=\"algoclient\" title=\"Algorand Server\">\n              <TabBase>\n                <AlgorandClient/>\n              </TabBase>\n            </Tab>\n            <Tab eventKey=\"account\" title=\"Setup\">\n              <TabBase>\n                <Account/>\n              </TabBase>\n              <TabBase>\n                <Contract/>\n              </TabBase>\n            </Tab>\n            <Tab eventKey=\"auth\" title=\"Transaction Authentication\">\n              <TabBase>\n                <Auth/>\n              </TabBase>\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n    </Container>\n  </div>\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport algorandClientReducer from '../features/algoclient/algoClientSlice'\nimport accountReducer from '../features/account/accountSlice'\nimport statusReducer from '../features/status/statusSlice'\nimport contractReducer from '../features/contract/contractSlice'\nimport authReducer from '../features/auth/authSlice'\n\nexport const store = configureStore({\n  reducer: {\n    status: statusReducer,\n    account: accountReducer,\n    contract: contractReducer,\n    algorandClient: algorandClientReducer,\n    auth: authReducer\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = Promise<void>> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\",\"tabBase\":\"App_tabBase__3Ir4k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hostPlace\":\"Status_hostPlace__3HjW4\",\"statePlace\":\"Status_statePlace__3QdJu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setupButton\":\"Contract_setupButton__24urr\",\"generatePasswd\":\"Contract_generatePasswd__JAHeY\"};"],"sourceRoot":""}