{"version":3,"sources":["components/funcPanel.module.css","app/hooks.ts","features/algoclient/algoClientSlice.ts","features/algoclient/AlgoClient.tsx","lib/utils.ts","lib/passkit.ts","features/status/statusSlice.ts","lib/passreq.ts","features/contract/contractSlice.ts","features/account/accountSlice.ts","features/account/Account.tsx","features/status/Status.tsx","components/funcPanel.tsx","features/contract/Contract.tsx","features/auth/authSlice.ts","features/auth/Auth.tsx","App.tsx","app/store.ts","index.tsx","App.module.css","features/status/Status.module.css","features/contract/Contract.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","algoClientSlice","createSlice","name","initialState","purestake","token","host","hostIndexer","reducers","setTokenHostIndexer","state","action","payload","setPurestake","actions","selectHost","algorandClient","selectHostIndexer","selectToken","selectPurestake","selectAlgod","createSelector","url","URL","server","protocol","hostname","pathname","algosdk","Algodv2","parseInt","port","selectIndexer","Indexer","purestakeHost","purestakeHostIndexer","AlgorandClient","algod","dispatch","useState","hostCurrent","setHostCurrent","hostIndexerCurrent","setHostIndexerCurrent","tokenCurrent","setTokenCurrent","Form","Group","controlId","Check","type","checked","label","Input","onChange","e","currentTarget","Label","target","href","Control","placeholder","value","disabled","Button","variant","onClick","preventDefault","a","status","do","alert","JSON","stringify","fromCharCode","String","encode","uint8array","output","i","length","push","btoa","join","decode","chars","Uint8Array","from","atob","asCharCode","c","charCodeAt","makeHashIterate","secret","k","v","createHash","update","digest","concatUint8Arrays","a1","a2","tmp","set","checkPasswd","appId","passwd","counter","loadState","data","address","apps","app","find","el","id","console","log","kvs","dict","kv","key","bytes","mark","uint","makeSigs","account","prepareSig","makeLogicSig","dapp","prepare","confirmSig","confirm","confirmTxnSig","confirmTxn","cancelSig","cancel","sig","signProgram","sk","toByte","pbkdf2IterationsCount","hashPasswd","window","crypto","subtle","hash","salt","iterations","importKey","deriveBits","hashed","statusSlice","amount","dappState","processing","setFullDAppState","toString","setUnavailableStatus","setAmount","setProcessing","setAmountUnknown","selectAmount","selectProcessing","selectDAppState","requestStatus","getState","selectAddress","accountInformation","makeRequest","rq","opts","res","noStatus","makeStatusRequest","waitForConfirmation","txId","timeout","Error","startround","currentround","pendingTransactionInformation","undefined","pendingInfo","statusAfterBlock","optIn","getTransactionParams","suggestedParams","txn","makeApplicationOptInTxn","addr","sendRawTransaction","signTxn","clear","makeApplicationClearStateTxn","setup","strToObj","b","iteratesCount","makeApplicationNoOpTxn","encodeUint64","encodeObj","findCredentials","indexer","notePrefix","searchForTransactions","applicationID","txType","search","txs","transactions","tx","note","txNote","prefix","j","msg","decodeObj","slice","sigs","signLogicSigTransactionObject","logicSigFromByte","blob","makeConfirmTxn","confirmCTxn","ctxn","txID","lCTxn","lsigTxn","args","lTxn","contractSlice","setSigs","selectSigs","contract","requestSetupContract","selectAccount","hashedPasswd","accountSlice","mnemonic","setAddress","setMnemonic","mnemonicToSecretKey","selectMnemonic","setAddressMnemonicAndUpdateContract","oldAddress","setMnemonicUpdateAccount","Account","mnemonicCurrent","setMnemonicCurrent","newMnemonic","secretKeyToMnemonic","generateAccount","split","Status","Card","Body","className","styles","hostPlace","Container","Row","as","Col","statePlace","FuncPanel","props","funcPanel","children","SetupButton","setPasswd","setupButton","onSetup","generatePasswd","genPasswd","handleError","response","body","message","Contract","authSlice","passwdRaw","passwdHashed","currentRequest","setCurrentRequest","selectCurrentRequest","auth","selectPasswdRaw","memorizedPasswdRaw","memorizedPasswdHash","selectPasswd","selectAvailableRequests","makePaymentTxn","raddr","curTxn","makePaymentTxnWithSuggestedParamsFromObject","to","requestPrepare","kPrepare","secretConfirm","assignGroupID","decodeUnsignedTransaction","encodeUnsignedTransaction","groupCTxn","groupTxn","rawTxID","requestConfirm","requestLSigs","requestAuth","genTxn","onGroup","ButtonRequest","title","availableRequests","Auth","curPasswd","setCurPasswd","setRAddr","setTxn","setGroupTxn","setGroupCTxn","handleFind","useCallback","handlePrepare","handleConfirm","handleCancel","handleMake","Header","xs","style","display","justifyContent","flex","flexDirection","position","parse","TabBase","classNames","tabBase","App","main","sm","Tabs","defaultActiveKey","Tab","eventKey","store","configureStore","reducer","statusReducer","accountReducer","contractReducer","algorandClientReducer","authReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc6d5d43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"funcPanel\":\"funcPanel_funcPanel__3QdLC\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport algosdk from \"algosdk\";\n\nexport interface AlgoClient {\n  purestake: boolean;\n  token: string;\n  host: string;\n  hostIndexer: string;\n}\n\nconst initialState: AlgoClient = {\n  purestake: true,\n  token: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n  host: 'http://localhost:4001',\n  hostIndexer: 'http://localhost:8980'\n};\n\nexport const algoClientSlice = createSlice({\n  name: 'algorandClient',\n  initialState,\n  reducers: {\n    setTokenHostIndexer: (state, action: PayloadAction<{token: string, host: string, hostIndexer: string}>) => {\n      state.token = action.payload.token\n      state.host = action.payload.host\n      state.hostIndexer = action.payload.hostIndexer\n    },\n    setPurestake: (state, action: PayloadAction<boolean>) => {\n      state.purestake = action.payload\n    }\n  },\n});\n\nexport const { setTokenHostIndexer, setPurestake } = algoClientSlice.actions\n\nexport const selectHost = (state: RootState) => state.algorandClient.host\nexport const selectHostIndexer = (state: RootState) => state.algorandClient.hostIndexer\nexport const selectToken = (state: RootState) => state.algorandClient.token\nexport const selectPurestake = (state: RootState) => state.algorandClient.purestake\nexport const selectAlgod = createSelector(\n  selectHost,\n  selectToken,\n  selectPurestake,\n  (host, token, purestake) => {\n    let url = new URL(host)\n    let server = url.protocol+\"//\"+url.hostname+url.pathname    \n\n    return new algosdk.Algodv2(\n      purestake ? {\n        \"X-API-Key\": token\n      } : token, \n      server, parseInt(url.port)||\"\"\n    )\n  }\n)\nexport const selectIndexer = createSelector(  \n  selectHostIndexer,\n  selectToken,\n  selectPurestake,\n  (hostIndexer, token, purestake) => {\n    let url = new URL(hostIndexer)\n    let server = url.protocol+\"//\"+url.hostname+url.pathname    \n\n    return new algosdk.Indexer(\n      purestake ? {\n        \"X-API-Key\": token\n      } : token, \n      server, parseInt(url.port)||\"\"\n    )\n  }\n)\n\nexport default algoClientSlice.reducer;\n","import { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  setPurestake,\n  selectHost,\n  selectToken,\n  selectAlgod,\n  selectPurestake,\n  selectHostIndexer,\n  setTokenHostIndexer\n} from './algoClientSlice';\nimport { Button, Form } from 'react-bootstrap';\n\nconst purestakeHost = \"https://testnet-algorand.api.purestake.io/ps2\"\nconst purestakeHostIndexer = \"https://testnet-algorand.api.purestake.io/idx2\"\n\nexport function AlgorandClient() {\n  const host = useAppSelector(selectHost)\n  const hostIndexer = useAppSelector(selectHostIndexer)\n  const token = useAppSelector(selectToken)\n  const algod = useAppSelector(selectAlgod)\n  const purestake = useAppSelector(selectPurestake)\n  const dispatch = useAppDispatch()\n  const [hostCurrent, setHostCurrent] = useState(host)\n  const [hostIndexerCurrent, setHostIndexerCurrent] = useState(hostIndexer)\n  const [tokenCurrent, setTokenCurrent] = useState(token)\n\n  return <Form>\n    <Form.Group controlId=\"formPurestake\">\n      <Form.Check \n        type=\"checkbox\" \n        checked={purestake} \n        label=\"Purestake\"        \n      >\n        <Form.Check.Input type=\"checkbox\" checked={purestake} onChange={(e: any)=>dispatch(setPurestake(e.currentTarget.checked))}/>\n        <Form.Check.Label><a target=\"_blank\" href=\"https://developer.purestake.io/login\">Purestake</a></Form.Check.Label>\n      </Form.Check>\n    </Form.Group>\n\n    <Form.Group controlId=\"formToken\">\n      <Form.Label>Token</Form.Label>\n      <Form.Control \n        type=\"text\" \n        placeholder=\"Enter token\" \n        value={tokenCurrent} \n        onChange={(e)=>setTokenCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n\n    <Form.Group controlId=\"formHost\">\n      <Form.Label>Algod</Form.Label>\n      <Form.Control \n        type=\"text\"\n        placeholder=\"Enter server host\" \n        disabled={purestake}\n        value={\n          purestake ? purestakeHost : hostCurrent\n        } \n        onChange={(e)=>setHostCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n    <Form.Group controlId=\"formHostIndexer\">\n      <Form.Label>Indexer</Form.Label>\n      <Form.Control \n        type=\"text\"\n        placeholder=\"Enter server host\" \n        disabled={purestake}\n        value={\n          purestake ? purestakeHostIndexer : hostIndexerCurrent\n        } \n        onChange={(e)=>setHostIndexerCurrent(e.currentTarget.value)}\n      />\n    </Form.Group>\n\n    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n      e.preventDefault()\n      dispatch(setTokenHostIndexer({\n        token: tokenCurrent, \n        host: purestake ? purestakeHost : hostCurrent,\n        hostIndexer: purestake ? purestakeHostIndexer : hostIndexerCurrent\n      }));\n    }}>\n      Save\n    </Button>{' '}\n    <Button variant=\"primary\" type=\"submit\" onClick={async (e) => {\n      e.preventDefault()\n      let status = await algod.status().do()\n      alert(JSON.stringify(status))\n    }}>\n      Test\n    </Button>\n  </Form>\n}\n","import {createHash} from \"sha256-uint8array\"\n\nconst {fromCharCode} = String;\n\nexport const encode = (uint8array: Uint8Array) => {\n  const output = [];\n  for (let i = 0, {length} = uint8array; i < length; i++)\n    output.push(fromCharCode(uint8array[i]));\n  return btoa(output.join(''));\n}\nexport const decode = (chars: string) => Uint8Array.from(atob(chars), asCharCode);\n\nconst asCharCode = (c: string) => c.charCodeAt(0);\n\nexport function makeHashIterate(secret: string | Uint8Array, k: number) {\n  let v: Uint8Array = createHash().update(secret as any).digest()\n  for( let i=0; i<k-1; ++i ) {\n    v = createHash().update(v).digest()\n  }\n  return v\n}\n\nexport function concatUint8Arrays(a1: Uint8Array, a2: Uint8Array) {\n  var tmp = new Uint8Array(a1.length + a2.length)\n  tmp.set(a1)\n  tmp.set(a2, a1.length)\n  return tmp;\n}","import algosdk from \"algosdk\";\nimport dapp from \"../dapp.json\"\nimport { decode, encode, makeHashIterate } from \"./utils\";\n\ntype PassDAppSetupState = {\n  status: \"wait-setup\"\n}\n\ntype PassDAppPrepareState = {\n  status: \"wait-prepare\",\n  secret: string,\n  counter: number\n}\n\ntype PassDAppConfirmState = {\n  status: \"wait-confirm\",\n  mark: string,  \n  counter: number,\n  secret: string\n}\n\nexport type PassDAppState = {status: \"not-created\"} | {status: \"not-opted-in\"} | \nPassDAppSetupState | PassDAppPrepareState | PassDAppConfirmState\n\nexport type AuthRequest = string\n\n\nexport function checkAuthRequest(mark: string, state: PassDAppConfirmState) {\n  return mark==state.mark\n}\n\nexport function checkPasswd(appId: number, passwd: Uint8Array, state: PassDAppState): boolean {\n  if( \n    state.status===\"not-created\" || \n    state.status===\"not-opted-in\" ||\n    state.status===\"wait-setup\"\n  ) return false\n  return encode(makeHashIterate(\n    passwd, state.counter\n  ))==state.secret\n}\n\ntype StateValue = {\n  bytes: string,\n  uint: number\n}\n\nexport function loadState(data: Record<string, any>, address: string, appId: number): PassDAppState {\n  if( !data ) return {status: \"not-created\"}\n  let apps = data[\"apps-local-state\"]\n  if( !apps ) {\n    return {status: \"not-opted-in\"}\n  }\n  let app = apps.find((el: any)=>el.id==appId)\n  if( !app ) {\n    return {status: \"not-opted-in\"}\n  }\n  console.log(app)\n  let kvs = app['key-value']\n  let dict: Record<string, StateValue> = {}\n  for( let i in kvs) {\n    let kv = kvs[i] \n    console.log(kv, atob(kv.key))\n    dict[atob(kv.key)] = kv.value\n  }\n  console.log(dict)\n  if( !dict.secret.bytes ) {\n    return {\n      status: \"wait-setup\"\n    }\n  } else if( dict.mark.bytes ) {\n    return {\n      status: \"wait-confirm\", \n      mark: dict.mark.bytes, \n      secret: dict.secret.bytes,\n      counter: dict.counter.uint\n    }\n  } else {\n    return {\n      status: \"wait-prepare\", \n      counter: dict.counter.uint,\n      secret: dict.secret.bytes\n    }\n  }\n//  \"bm9wZQ==\"\n  return {status: \"not-opted-in\"}\n}\n\nexport function getCounter(dappState: PassDAppState): number {\n  if( !dappState ) return 0\n  if( \n    dappState.status==\"not-created\" || \n    dappState.status==\"not-opted-in\" ||\n    dappState.status==\"wait-setup\"\n  ) {\n    return 0\n  }\n  return dappState.counter\n}\n\nexport function genPasswd() {\n  let passwd = algosdk.secretKeyToMnemonic(algosdk.generateAccount().sk)\n  passwd = passwd.split(\" \").slice(0, 4).join(\" \")\n  return passwd\n}\n\nexport type LogicSig = ReturnType<typeof algosdk.makeLogicSig>\n\nexport type Sigs = {\n  prepareSig: string;\n  confirmSig: string;\n  confirmTxnSig: string;\n  cancelSig: string;\n}\n\nexport function makeSigs(account: algosdk.Account): Sigs {\n  let prepareSig = algosdk.makeLogicSig(decode(dapp.prepare))\n  let confirmSig = algosdk.makeLogicSig(decode(dapp.confirm))\n  let confirmTxnSig = algosdk.makeLogicSig(decode(dapp.confirmTxn))\n  let cancelSig = algosdk.makeLogicSig(decode(dapp.cancel))\n\n  // LogicSig#sig(secret, msig) is broken: msig==undefined is not allowed by type system\n  prepareSig.sig = prepareSig.signProgram(account.sk)\n  confirmSig.sig = confirmSig.signProgram(account.sk)\n  confirmTxnSig.sig = confirmTxnSig.signProgram(account.sk)\n  cancelSig.sig = cancelSig.signProgram(account.sk)\n  return {\n    prepareSig: encode(prepareSig.toByte()),\n    confirmSig: encode(confirmSig.toByte()),\n    confirmTxnSig: encode(confirmTxnSig.toByte()),\n    cancelSig: encode(cancelSig.toByte())\n  }\n}\n\n// At least 1,000,000, better is 5,000,000 - do not use the values you can find on the internet which are way too low\nconst pbkdf2IterationsCount = 1000000\n\nexport async function hashPasswd(passwd: string): Promise<Uint8Array> {\n  console.log(\"Applying a password hashing function (PBKDF2)... \")\n    \n  let hashed = new Uint8Array(await window.crypto.subtle.deriveBits(\n    {\n        name: \"PBKDF2\",\n        hash: \"SHA-256\",\n        salt: decode(dapp[\"pbkdf2Salt\"] || 'hpzMoniyx4nX2+nBwTCF+FFJW1OVanyMxO0bRj/a5Uw='),\n        iterations: pbkdf2IterationsCount,\n    },\n    await window.crypto.subtle.importKey(\n      \"raw\",\n      Uint8Array.from(passwd, (c: string) => c.charCodeAt(0)), \n      \"PBKDF2\", \n      false,\n      [\"deriveBits\"]\n    ),\n    256\n  ))\n\n  console.log(\"Done\")\n\n  return hashed\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport { loadState, PassDAppState } from \"../../lib/passkit\"\nimport { selectAddress } from \"../account/accountSlice\"\nimport { selectAlgod } from \"../algoclient/algoClientSlice\"\nimport { appId } from \"../../dapp.json\"\n\nexport interface Status {\n  amount: string;\n  dappState: null | PassDAppState;\n  processing: boolean;\n}\n\nconst initialState: Status = {\n  amount: \"\",\n  dappState: null,\n  processing: false\n}\n\nexport const statusSlice = createSlice({\n  name: 'status',\n  initialState,\n  reducers: {\n    setFullDAppState: (state, action: PayloadAction<{amount: number, dappState: PassDAppState}>) => {\n      let {amount, dappState} = action.payload\n      state.amount = amount.toString()\n      state.dappState = dappState\n    },\n    setUnavailableStatus: (state, action: PayloadAction<void>) => {\n      state.amount = \"\"\n      state.dappState = null\n    },\n    setAmount: (state, action: PayloadAction<number>) => {\n      state.amount = action.payload.toString()\n    },\n    setProcessing: (state, action: PayloadAction<boolean>) => {\n      state.processing = action.payload\n    },\n    setAmountUnknown: (state, action: PayloadAction<undefined>) => {\n      state.amount = \"\"\n    }\n  },\n})\n\nexport const { setAmount, setAmountUnknown, setFullDAppState, setUnavailableStatus, setProcessing } = statusSlice.actions\n\nexport const selectAmount = (state: RootState) => state.status.amount\nexport const selectProcessing = (state: RootState) => state.status.processing\nexport const selectDAppState = (state: RootState) => state.status.dappState\n\nexport const requestStatus = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  if (address) {\n    let data = await algod.accountInformation(address).do()\n    dispatch(setFullDAppState({amount: data.amount, dappState: loadState(data, address, appId)}))\n    dispatch(setAmount(data.amount))\n  }\n};\n\nexport const makeRequest = <T = void>(rq: AppThunk<Promise<T>>, opts?: {noStatus?: boolean}): AppThunk<Promise<T>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    let res = await dispatch(rq)\n    if( !opts || !opts.noStatus ) {\n      await dispatch(requestStatus())\n    }\n    return res\n  } catch(e) {\n    throw e\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport const makeStatusRequest = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setProcessing(true))\n  try {\n    await dispatch(requestStatus())\n  } catch(e) {\n    throw e\n  } finally {\n    dispatch(setProcessing(false))\n  }\n}\n\nexport default statusSlice.reducer;\n","import algosdk from \"algosdk\";\nimport { iteratesCount } from \"../features/contract/contractSlice\";\nimport { AuthRequest, makeSigs, Sigs } from \"./passkit\";\nimport { concatUint8Arrays, decode, encode, makeHashIterate } from \"./utils\";\n\n/**\n * utility function to wait on a transaction to be confirmed\n * the timeout parameter indicates how many rounds do you wish to check pending transactions for\n */\nasync function waitForConfirmation(algod: algosdk.Algodv2, txId: string, timeout: number) {\n  const status = await algod.status().do();\n  if (typeof status === 'undefined')\n    throw new Error('Unable to get node status');\n  const startround = status['last-round'];\n  let currentround = startround;\n\n  while (currentround < startround + timeout) {\n    const pendingInfo = await algod\n      .pendingTransactionInformation(txId)\n      .do();\n    if (pendingInfo !== undefined) {\n      if (\n        pendingInfo['confirmed-round'] !== null &&\n        pendingInfo['confirmed-round'] > 0\n      ) {\n        // Got the completed Transaction\n        // Wait for current block to be assimilated\n        \n        await algod.statusAfterBlock(currentround).do();\n        return pendingInfo;\n      }\n\n      if (\n        pendingInfo['pool-error'] != null &&\n        pendingInfo['pool-error'].length > 0\n      ) {\n        // If there was a pool error, then the transaction has been rejected!\n        throw new Error(\n          `Transaction Rejected pool error${pendingInfo['pool-error']}`\n        );\n      }\n    }\n    console.log('Waiting on round '+currentround)\n    await algod.statusAfterBlock(currentround).do();\n    currentround += 1;\n  }\n  /* eslint-enable no-await-in-loop */\n  throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n\nexport async function optIn(algod: algosdk.Algodv2, account: algosdk.Account, appId: number) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationOptInTxn(\n    account.addr, \n    suggestedParams, \n    appId\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  console.log('opted in')\n}\n\nexport async function clear(algod: algosdk.Algodv2, account: algosdk.Account, appId: number) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationClearStateTxn(\n    account.addr, \n    suggestedParams, \n    appId\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  console.log('cleared')\n}\n\nexport async function setup(\n  algod: algosdk.Algodv2, \n  account: algosdk.Account, \n  appId: number, \n  passwd: Uint8Array\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let {\n    prepareSig, \n    confirmSig,\n    confirmTxnSig,\n    cancelSig\n  } = makeSigs(account)\n  const strToObj = (b: string) => decode(b)\n  const secret = makeHashIterate(passwd, iteratesCount)\n  let txn = algosdk.makeApplicationNoOpTxn(\n    account.addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"setup\")),\n      secret,\n      algosdk.encodeUint64(iteratesCount)\n    ], undefined, undefined, undefined,\n    concatUint8Arrays(\n      secret, algosdk.encodeObj({\n        address: account.addr,\n        prepare: strToObj(prepareSig), \n        confirm: strToObj(confirmSig), \n        confirmTxn: strToObj(confirmTxnSig), \n        cancel: strToObj(cancelSig)\n      })\n    )\n  )\n  const {txId} = await algod.sendRawTransaction(txn.signTxn(account.sk)).do()\n  await waitForConfirmation(algod, txId, 1000)\n  \n  console.log('setup', passwd)\n  return passwd\n}\n\nexport async function findCredentials(\n  indexer: algosdk.Indexer, \n  appId: number, \n  passwd: Uint8Array\n): Promise<{address: string, sigs: Sigs}> {\n  let notePrefix = makeHashIterate(passwd, iteratesCount)\n  let search = await indexer.searchForTransactions()\n  .applicationID(appId)\n  .txType(\"appl\")\n  .notePrefix(notePrefix).do()\n  let txs = search && search.transactions\n  if( !txs || txs.length==0 ) throw \"Password not found\"\n  let txNote\n  for( let i=txs.length-1; i>=0; --i ) {\n    let tx = txs[i]\n    if( !tx.note ) continue\n    txNote = decode(tx.note)\n    let prefix = true\n    for( let j=0; j<notePrefix.length; ++j ) {\n      if( txNote[j]!=notePrefix[j] ) {\n        prefix = false\n        break\n      }\n    }\n    if( prefix ) break\n    txNote = null\n  }\n  if( !txNote ) throw \"Password not found\" \n  let msg: any = algosdk.decodeObj(txNote.slice(notePrefix.length))\n  return {\n    address: msg.address,\n    sigs: {\n      prepareSig: encode(msg.prepare),\n      confirmSig: encode(msg.confirm),\n      confirmTxnSig: encode(msg.confirmTxn),\n      cancelSig: encode(msg.cancel)\n    }\n  }\n}\n\nexport async function prepare(\n  algod: algosdk.Algodv2, \n  addr: string,\n  sigs: Sigs,\n  appId: number,\n  secret: Uint8Array,\n  mark: string\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"prepare\")),\n      secret,\n      decode(mark)\n    ]\n  )\n  const {txId} = await algod.sendRawTransaction(\n    algosdk.signLogicSigTransactionObject(\n      txn, \n      algosdk.logicSigFromByte(decode(sigs.prepareSig))\n    ).blob\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n  return\n}\n\nexport async function makeConfirmTxn(\n  algod: algosdk.Algodv2, \n  addr: string,\n  appId: number,\n  secret: Uint8Array,\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  return algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"confirm\")),\n      secret\n    ]\n  )\n}\n\nexport async function cancel(\n  algod: algosdk.Algodv2, \n  addr: string,\n  sigs: Sigs,\n  appId: number,\n  secret: Uint8Array\n) {\n  const suggestedParams = await algod.getTransactionParams().do();\n  let txn = algosdk.makeApplicationNoOpTxn(\n    addr, \n    suggestedParams, \n    appId, [\n      decode(btoa(\"cancel\")),\n      secret\n    ]\n  )\n  const {txId} = await algod.sendRawTransaction(\n    algosdk.signLogicSigTransactionObject(\n      txn, \n      algosdk.logicSigFromByte(decode(sigs.cancelSig))\n    ).blob\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n}\n\nexport async function confirmCTxn(\n  algod: algosdk.Algodv2, \n  sigs: Sigs,\n  ctxn: algosdk.Transaction,\n  txn: algosdk.Transaction\n) {\n  console.log('ctxn: ', ctxn.txID())\n  let lCTxn = algosdk.signLogicSigTransactionObject(\n    ctxn, \n    algosdk.logicSigFromByte(decode(sigs.confirmSig))\n  ).blob\n  console.log('txn: ', txn.txID())\n  let lsigTxn = algosdk.logicSigFromByte(decode(sigs.confirmTxnSig))\n  // There is no method to change arg for LogicSig object.\n  // Do it manually.\n  lsigTxn.args = [algosdk.encodeUint64(0)]\n  let lTxn = algosdk.signLogicSigTransactionObject(\n    txn, \n    lsigTxn\n  ).blob\n  const {txId} = await algod.sendRawTransaction(\n    [lCTxn, lTxn]\n  ).do()\n  await waitForConfirmation(algod, txId, 1000)\n  return\n}\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport { Sigs, hashPasswd } from '../../lib/passkit'\nimport {appId} from \"../../dapp.json\"\nimport { selectAccount } from \"../account/accountSlice\"\nimport { selectAlgod } from \"../algoclient/algoClientSlice\"\nimport { selectDAppState } from \"../status/statusSlice\"\nimport { clear, optIn, setup } from \"../../lib/passreq\"\n\nexport const iteratesCount = 1000;\n\nexport interface Contract {\n  appId: null | number;\n  sigs: null | Sigs;\n}\n\nconst initialState: Contract = {\n  appId,\n  sigs: null\n}\n\nexport const contractSlice = createSlice({\n  name: 'contract',\n  initialState,\n  reducers: {\n    setSigs: (state, action: PayloadAction<Sigs | null>) => {\n      state.sigs = action.payload\n    }\n  },\n})\n\nexport const { setSigs } = contractSlice.actions\n\nexport const selectSigs = (state: RootState) => state.contract.sigs\n\nexport const requestOptIn = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  if( !account ) throw \"Account is not loaded\"\n  await optIn(algod, account, appId)\n};\n\nexport const requestClear = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  if( !account ) throw \"Account is not loaded\"\n  await clear(algod, account, appId)\n};\n\nexport const requestSetupContract = (passwd: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const account = selectAccount(getState())\n  const algod = selectAlgod(getState())\n  const dappState = selectDAppState(getState())\n  if( !account ) throw \"Account is not loaded\"\n  if( !dappState ) throw \"App state is not loaded\"\n  if( dappState.status==\"not-created\" ) throw \"App is not created\"\n  if( dappState.status==\"not-opted-in\" ) throw \"App is not opted in\"\n  const hashedPasswd = await hashPasswd(passwd)\n  await setup(\n    algod, \n    account, \n    appId, \n    hashedPasswd\n  )\n};\n\nexport default contractSlice.reducer;\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport algosdk from \"algosdk\"\nimport { setSigs } from \"../contract/contractSlice\"\nimport { makeStatusRequest, setAmountUnknown } from \"../status/statusSlice\"\n\nexport interface AccountClient {\n  mnemonic: string;\n  address: string;\n}\n\nconst initialState: AccountClient = {\n  mnemonic: \"\",\n  address: \"\"\n}\n\nexport const accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    setAddress: (state, action: PayloadAction<string>) => {\n      if( state.address!=action.payload ) {\n        state.mnemonic = ''\n      }\n      state.address = action.payload      \n    },\n    setMnemonic: (state, action: PayloadAction<string>) => {\n      state.mnemonic = action.payload\n      state.address = algosdk.mnemonicToSecretKey(state.mnemonic).addr\n    },\n  },\n})\n\nexport const { setMnemonic, setAddress } = accountSlice.actions\n\nexport const selectMnemonic = (state: RootState) => state.account.mnemonic\nexport const selectAddress = (state: RootState) => state.account.address\nexport const selectAccount = createSelector(\n  selectMnemonic,\n  (mnemonic) => mnemonic ? algosdk.mnemonicToSecretKey(mnemonic) : null\n)\n\nexport const setAddressMnemonicAndUpdateContract = (payload: {\n  address?: string,\n  mnemonic?: string\n}): AppThunk => async (dispatch, getState) => {\n  let oldAddress = selectAddress(getState())\n  if( payload.mnemonic ) {\n    dispatch(setMnemonic(payload.mnemonic))\n  } else if( payload.address ) {\n    dispatch(setAddress(payload.address))\n  }\n  let newAddress = selectAddress(getState())\n  if( newAddress==oldAddress ) return\n  dispatch(setSigs(null))\n  dispatch(setAmountUnknown())\n}\n\nexport const setMnemonicUpdateAccount = (\n  payload: {mnemonic: string}\n): AppThunk => async (dispatch, getState) => {\n  let { mnemonic } = payload\n  dispatch(setAddressMnemonicAndUpdateContract({mnemonic}))\n  dispatch(makeStatusRequest())\n}\n\n\nexport default accountSlice.reducer;\n","import { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  setMnemonic,\n  selectMnemonic,\n  setMnemonicUpdateAccount\n} from './accountSlice';\nimport { Button, Form } from 'react-bootstrap';\nimport algosdk from \"algosdk\"\n\nexport function Account() {\n  const mnemonic = useAppSelector(selectMnemonic)\n  const dispatch = useAppDispatch()\n  const [mnemonicCurrent, setMnemonicCurrent] = useState(mnemonic)\n\n  return <div>    \n    <Form>\n      <Form.Group controlId=\"mnemonic\">\n        <Form.Label>Mnemonic</Form.Label>\n        <Form.Control \n          type=\"text\" \n          placeholder=\"Enter 25-words mnemonic phrase\" \n          value={mnemonicCurrent} \n          onChange={(e)=>setMnemonicCurrent(e.currentTarget.value)}\n        />\n      </Form.Group>\n\n      <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n        e.preventDefault()\n        let newMnemonic = algosdk.secretKeyToMnemonic(algosdk.generateAccount().sk)\n        setMnemonicCurrent(newMnemonic)\n        dispatch(setMnemonicUpdateAccount({mnemonic: newMnemonic}))\n      }}>\n        New\n      </Button>{' '}\n      <Button variant=\"primary\" type=\"submit\" disabled={mnemonicCurrent==mnemonic || mnemonicCurrent.split(' ').length!=25} onClick={(e) => {\n        e.preventDefault()\n        dispatch(setMnemonic(mnemonicCurrent))\n        dispatch(setMnemonicUpdateAccount({mnemonic: mnemonicCurrent}))\n      }}>\n        Save\n      </Button>{' '}\n    </Form>\n  </div>\n}\n","import { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  makeStatusRequest,\n  selectAmount,\n  selectDAppState,\n  selectProcessing,\n} from './statusSlice';\nimport {\n  selectAddress\n} from '../account/accountSlice';\nimport {\n  selectHost\n} from '../algoclient/algoClientSlice';\nimport styles from './Status.module.css';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\n\nexport function Status() {\n  const processing = useAppSelector(selectProcessing)\n  const amount = useAppSelector(selectAmount)\n  const address = useAppSelector(selectAddress)\n  const host = useAppSelector(selectHost)\n  const dappState = useAppSelector(selectDAppState)\n  const dispatch = useAppDispatch()\n\n  return <Card>    \n    <Card.Body>\n      <div className={styles.hostPlace}>\n        {host}\n      </div>\n      <Container>\n        <Row as=\"dl\">\n          <Col as=\"dt\">Address: </Col>\n          <Col as=\"dd\">{ address || \"unknown\" }</Col>\n          <Col as=\"dt\">Amount: </Col>\n          <Col as=\"dd\">{ amount==\"\" ? \"unknown\" : amount }</Col>\n        </Row>\n      </Container>\n      <pre className={styles.statePlace}>\n        {\n          processing\n          ? \"loading...\"\n          : dappState ? JSON.stringify(dappState, null, 4) : \"\"\n        }\n      </pre>\n      <Button variant=\"primary\" type=\"submit\" disabled={!address} \n      onClick={async (e) => {\n        e.preventDefault()\n        dispatch(makeStatusRequest())\n      }}>\n        Update\n      </Button>\n    </Card.Body>\n  </Card>\n}\n","import styles from './funcPanel.module.css'\n\nexport default function FuncPanel(props: {children: React.ReactNode}) {\n  return <div className={styles.funcPanel}>\n    {props.children}\n  </div>\n}","import { useState } from 'react'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  selectSigs,\n  requestSetupContract, requestOptIn, requestClear\n} from './contractSlice'\nimport {\n  selectAddress,\n} from '../account/accountSlice'\nimport styles from './Contract.module.css'\nimport { Button, Form } from 'react-bootstrap'\n\nimport { selectAlgod, selectPurestake } from '../algoclient/algoClientSlice'\nimport { selectAccount } from '../account/accountSlice'\n\nimport { genPasswd } from '../../lib/passkit'\nimport { makeRequest, selectDAppState } from '../status/statusSlice'\n\nimport FuncPanel from '../../components/funcPanel'\n\nexport function SetupButton(props: {onSetup: (passwd: string)=>void}) {\n  const [passwd, setPasswd] = useState<string>(\"\")\n  return <div className={styles.setupButton}>\n    <Button disabled={!passwd} onClick={()=>{\n      props.onSetup(passwd)\n    }}>\n      Setup\n    </Button>\n    <span className={styles.generatePasswd}>\n      <Form.Control \n      value={passwd} \n      onChange={(e)=>setPasswd(e.target.value)} \n      type=\"text\" placeholder=\"Enter password\"/>\n      <Button onClick={()=>setPasswd(genPasswd())}>\n        Generate\n      </Button>\n    </span>\n  </div>\n}\n\nfunction handleError(e: any) {\n  if( typeof e == \"string\" ) {\n    alert(e)\n  } else {\n    alert(e?.response?.body?.message || \"Failed\")\n  }\n}\n\nexport function Contract() {\n  const dispatch = useAppDispatch()\n  const algod = useAppSelector(selectAlgod)\n  const account = useAppSelector(selectAccount)\n  const purestake = useAppSelector(selectPurestake)\n\n  return <Form>    \n    <FuncPanel>\n      <Button\n      disabled={!account || !algod} \n      onClick={\n        async () => {\n          try {\n            await dispatch(makeRequest(requestOptIn()))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }>\n        Opt in\n      </Button>\n    </FuncPanel>\n    <FuncPanel>\n      <SetupButton onSetup={\n        async (passwd) => {\n          try {\n            await dispatch(makeRequest(requestSetupContract(passwd)))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }/>\n    </FuncPanel>\n    <FuncPanel>\n      <Button\n      disabled={!account || !algod} \n      onClick={\n        async () => {\n          try {\n            await dispatch(makeRequest(requestClear()))\n          } catch(e) {\n            handleError(e)\n          }\n        }\n      }>\n        Clear\n      </Button>\n    </FuncPanel>\n    <FuncPanel>\n      {\n        purestake\n        ? <div>\n          You can get some algos to a newly created account on the following pages\n          <ul>\n            <li><a target=\"_blank\" href=\"https://bank.testnet.algorand.network\">https://bank.testnet.algorand.network</a></li>\n            <li><a target=\"_blank\" href=\"https://testnet.algoexplorer.io/dispenser\">https://testnet.algoexplorer.io/dispenser</a></li>\n          </ul>\n        </div>\n        : <div>\n          You can get some algos to a newly created account using Sandbox client. See the example in the \n          article <a target=\"_blank\" href=\"https://developer.algorand.org/articles/introducing-sandbox-20/\">Introducing Sandbox 2.0</a>.\n        </div>\n      }\n    </FuncPanel>\n  </Form>\n}\n","import { createSelector } from \"reselect\"\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\nimport {  \n  checkAuthRequest,\n  checkPasswd\n} from '../../lib/passkit'\nimport algosdk from \"algosdk\"\nimport { selectAddress, setAddress } from \"../account/accountSlice\"\nimport { selectAlgod, selectIndexer } from \"../algoclient/algoClientSlice\"\nimport { selectSigs, setSigs } from \"../contract/contractSlice\"\nimport { makeRequest, selectDAppState } from \"../status/statusSlice\"\nimport { appId } from \"../../dapp.json\"\nimport { hashPasswd } from \"../../lib/passkit\"\nimport { cancel, confirmCTxn, findCredentials, makeConfirmTxn, prepare } from \"../../lib/passreq\"\nimport { encode, makeHashIterate } from \"../../lib/utils\"\n\nexport type RequestType = \"find\" | \"prepare\" | \"confirm\" | \"cancel\"\n\nexport interface Auth { \n  passwdRaw: string,\n  passwdHashed: Uint8Array | null,\n  currentRequest: RequestType | null;\n}\n\nconst initialState: Auth = {\n  passwdRaw: \"\",\n  passwdHashed: null,\n  currentRequest: null\n}\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setPasswd: (state, action: PayloadAction<string>) => {\n      if( state.passwdRaw != action.payload ) {\n        state.passwdHashed = null\n      }\n      state.passwdRaw = action.payload\n    },\n    setCurrentRequest: (state, action: PayloadAction<RequestType | null>) => {\n      state.currentRequest = action.payload\n    },\n  },\n})\n\nexport const { setPasswd, setCurrentRequest } = authSlice.actions\n\nexport const selectCurrentRequest = (state: RootState) => state.auth.currentRequest\nexport const selectPasswdRaw = (state: RootState) => state.auth.passwdRaw\n\nlet memorizedPasswdRaw: string = \"\"\nlet memorizedPasswdHash: Uint8Array | null = null\nexport const selectPasswd = async (state: RootState) => {\n  if( !memorizedPasswdHash || state.auth.passwdRaw != memorizedPasswdRaw ) {\n    memorizedPasswdHash = await hashPasswd(state.auth.passwdRaw)\n    memorizedPasswdRaw = state.auth.passwdRaw\n  }\n  return memorizedPasswdHash\n}\n\nexport type AvailableRequests = {[K in RequestType]?: boolean}\n\nexport const selectAvailableRequests = createSelector(\n  selectDAppState,\n  selectSigs,\n  (dappState, sigs): AvailableRequests => {\n    if( !sigs || !dappState ) return {find: true}\n    if( dappState.status===\"not-created\" ) return {}\n    if( dappState.status===\"not-opted-in\" ) return {find: true}\n    if( dappState.status===\"wait-setup\" ) return {find: true}\n    if( dappState.status===\"wait-prepare\" ) return {find: true, prepare: true}\n    if( dappState.status===\"wait-confirm\" ) return {find: true, confirm: true, cancel: true}\n    return {find: true, prepare: true, confirm: true, cancel: true}\n  }\n)\n\nexport const selectPasswdCheck = createSelector(\n  selectDAppState,\n  selectPasswd,\n  async (dappState, passwd): Promise<boolean> => {\n    if( !dappState ) return false\n    return checkPasswd(appId, await passwd, dappState)\n  }\n)\n\n\nexport const makePaymentTxn = (raddr: string, amount: number): \nAppThunk<Promise<algosdk.Transaction>> => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  if( !amount ) throw \"Payment amount is not set\"\n  if( !raddr ) throw \"Receiver address is not set\"\n  const suggestedParams = await algod.getTransactionParams().do()\n  const curTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: raddr,\n    amount,\n    suggestedParams\n  })\n  return curTxn\n}\n\nexport const requestPrepare = (txn: algosdk.Transaction): \nAppThunk<Promise<{groupCTxn: algosdk.Transaction, groupTxn: algosdk.Transaction}>> => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  const passwd = await selectPasswd(getState())\n  if( !sigs ) throw \"Credentials were not set\"\n  if( !dappState || dappState.status!=\"wait-prepare\" ) throw \"Incorrect contract local state\"\n  dispatch(setCurrentRequest('prepare'))\n  try {\n    let kPrepare = dappState.counter - dappState.counter%3\n    let kConfirm = kPrepare - 2\n    let secretConfirm = makeHashIterate(passwd, kConfirm)\n    let ctxn = await makeConfirmTxn(\n      algod, address, appId, \n      secretConfirm\n    )\n    let [groupCTxn, groupTxn] = algosdk.assignGroupID([\n      ctxn,\n      // Do not mutate initial txn object\n      algosdk.decodeUnsignedTransaction(\n        algosdk.encodeUnsignedTransaction(txn)\n      )\n    ])\n\n    await prepare(\n      algod, \n      address, \n      sigs, \n      appId, \n      makeHashIterate(secretConfirm, 2),\n      encode(groupCTxn.rawTxID())\n    )\n    return {groupCTxn, groupTxn}\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestConfirm = (\n  groupCTxn: algosdk.Transaction, \n  groupTxn: algosdk.Transaction\n): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  if( !sigs ) throw \"Signatures not loaded\"\n  if( !dappState || dappState.status!==\"wait-confirm\" ) throw \"Not waiting for confirmation\"\n  if( !checkAuthRequest(\n    encode(groupCTxn.rawTxID()),\n    dappState\n  ) ) throw \"State check failed: it is not safe to proceed\"\n\n  dispatch(setCurrentRequest(\"confirm\"))\n  try {\n    await confirmCTxn(\n          algod, \n          sigs,\n          groupCTxn,\n          groupTxn\n    )\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestCancel = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const address = selectAddress(getState())\n  const algod = selectAlgod(getState())\n  const sigs = selectSigs(getState())\n  const dappState = selectDAppState(getState())\n  const passwd = await selectPasswd(getState())\n  if( !sigs ) throw \"Signatures not loaded\"\n  if( !dappState || dappState.status!==\"wait-confirm\" ) throw \"Not waiting for confirmation\"\n  dispatch(setCurrentRequest(\"cancel\"))\n  try {\n    await cancel(\n      algod, \n      address, \n      sigs, \n      appId, \n      makeHashIterate(passwd, dappState.counter-1),\n    )\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestLSigs = (): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const indexer: algosdk.Indexer = selectIndexer(getState())\n  const passwd = await selectPasswd(getState())\n  dispatch(setCurrentRequest(\"find\"))\n  try {\n    const {address, sigs} =  await findCredentials(\n      indexer, \n      appId,\n      passwd\n    )\n    dispatch(setAddress(address))\n    dispatch(setSigs(sigs))\n  } finally {\n    dispatch(setCurrentRequest(null))\n  }\n};\n\nexport const requestAuth = (\n  genTxn: (address: string) => Promise<algosdk.Transaction>,\n  onGroup?: (groupCTxn: algosdk.Transaction, groupTxn: algosdk.Transaction) => void\n): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const sigs = selectSigs(getState())\n  const passwd = await selectPasswd(getState())\n  const dappState = selectDAppState(getState())\n  if( !dappState || !sigs || !checkPasswd(appId, passwd, dappState)) {\n    await dispatch(makeRequest(requestLSigs()))\n  }\n  const address = selectAddress(getState())\n  let {groupCTxn, groupTxn} = await dispatch(makeRequest(\n    requestPrepare(await genTxn(address))\n  ))\n  onGroup?.(groupCTxn, groupTxn)\n\n  await dispatch(makeRequest(requestConfirm(groupCTxn, groupTxn)))\n}\n\nexport default authSlice.reducer;\n","import { useCallback, useState } from 'react'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  AvailableRequests,\n  makePaymentTxn,\n  requestAuth,\n  requestCancel,\n  requestConfirm,\n  requestLSigs,\n  requestPrepare,\n  RequestType,\n  selectAvailableRequests,\n  selectCurrentRequest,\n  selectPasswd,\n  selectPasswdRaw,\n  setPasswd\n} from './authSlice'\nimport {\n  selectAddress,\n} from '../account/accountSlice'\nimport { Button, Form, Card, Container, Row, Col } from 'react-bootstrap'\n\nimport { makeRequest } from '../status/statusSlice'\n\nimport FuncPanel from \"../../components/funcPanel\"\n\nimport algosdk from 'algosdk'\nimport { encode } from '../../lib/utils'\n\nfunction handleError(e: any) {\n  if( typeof e == \"string\" ) {\n    alert(e)\n  } else {\n    alert(e?.response?.body?.message || \"Request failed\")\n  }\n}\n\nfunction ButtonRequest(props: {\n  title: string, \n  type: RequestType,\n  availableRequests: AvailableRequests,\n  currentRequest: RequestType | null,\n  onClick: ()=>void\n}) {\n  let {title, type, availableRequests, currentRequest, onClick} = props\n  return <Button \n  disabled={!availableRequests[type] || !!currentRequest} \n  onClick={onClick}\n  variant={type==currentRequest ? \"outline-primary\" : \"primary\"}>\n    { title }\n  </Button>\n}\n\nexport function Auth() {\n  const dispatch = useAppDispatch()\n  const address = useAppSelector(selectAddress)\n  const availableRequests = {...useAppSelector(selectAvailableRequests)}\n  const currentRequest = useAppSelector(selectCurrentRequest)\n  const passwdRaw = useAppSelector(selectPasswdRaw)\n\n  const [curPasswd, setCurPasswd] = useState<string>(passwdRaw)\n\n  const [raddr, setRAddr] = useState<string>(\"QC7XT7QU7X6IHNRJZBR67RBMKCAPH67PCSX4LYH4QKVSQ7DQZ32PG5HSVQ\")\n  const [amount, setAmount] = useState<number>(110000)\n  const [txn, setTxn] = useState<null | algosdk.Transaction>(null)\n  const [groupTxn, setGroupTxn] = useState<null | algosdk.Transaction>(null)\n  const [groupCTxn, setGroupCTxn] = useState<null | algosdk.Transaction>(null)\n  if( !groupTxn || !groupCTxn ) {\n    delete availableRequests.confirm\n  }\n\n  const handleFind = useCallback(\n    async () => {\n      if( !curPasswd ) return\n      if( curPasswd!=passwdRaw ) dispatch(setPasswd(curPasswd))\n      try {\n        await dispatch(makeRequest(requestLSigs()))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [txn, curPasswd]\n  )\n\n  const handlePrepare = useCallback(\n    async () => {\n      if( !raddr ) return\n      try {\n        if( curPasswd!=passwdRaw ) dispatch(setPasswd(curPasswd))\n        const curTxn = await dispatch(makePaymentTxn(raddr, amount))\n        setTxn(curTxn)\n        setGroupCTxn(null)\n        setGroupTxn(null)\n        let {groupCTxn, groupTxn} = await dispatch(makeRequest(\n          requestPrepare(curTxn)\n        ))\n        setGroupCTxn(groupCTxn)\n        setGroupTxn(groupTxn)\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [curPasswd, address, raddr, amount]\n  )\n\n  const handleConfirm = useCallback(\n    async () => {\n      if( curPasswd!=passwdRaw ) dispatch(setPasswd(curPasswd))\n      if( !groupCTxn || !groupTxn ) return\n      try {\n        await dispatch(makeRequest(requestConfirm(groupCTxn, groupTxn)))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [groupCTxn, groupTxn, curPasswd]\n  )\n\n  const handleCancel = useCallback(\n    async () => {\n      if( curPasswd!=passwdRaw ) dispatch(setPasswd(curPasswd))\n      if( !curPasswd ) return\n      try {\n        await dispatch(makeRequest(requestCancel()))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [passwdRaw]\n  )\n\n  const handleMake = useCallback(\n    async () => {\n      try {\n        if( !curPasswd ) throw \"Passwd is not set\"\n        if( curPasswd!=passwdRaw ) dispatch(setPasswd(curPasswd))\n        await dispatch(requestAuth(\n          async () => {\n            const curTxn = await dispatch(makePaymentTxn(raddr, amount))\n            setTxn(curTxn)\n            setGroupCTxn(null)\n            setGroupTxn(null)\n            return curTxn\n          },\n          (groupCTxn, groupTxn) => {\n            setGroupCTxn(groupCTxn)\n            setGroupTxn(groupTxn)\n          }\n        ))\n      } catch(e) {\n        handleError(e)\n      }\n    },\n    [txn, curPasswd, amount, raddr]\n  )\n  return <Container>\n    <Row>\n      <Col>\n        <Form.Control \n        value={curPasswd} \n        onChange={(e)=>setCurPasswd(e.target.value)} \n        type=\"text\" placeholder=\"Enter password\"/>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <FuncPanel>\n          <Card>\n            <Card.Header>\n              <Button onClick={handleMake}>\n                Sign and Send Payment Transaction\n              </Button>\n            </Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group controlId=\"formBasicAddress\">\n                  <Form.Label>Recepient address</Form.Label>\n                  <Form.Control \n                  type=\"text\" \n                  placeholder=\"XYZ...\" \n                  value={raddr}\n                  onChange={e=>setRAddr(e.target.value)}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicAmount\">\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control \n                  type=\"number\" \n                  placeholder=\"Amount\" \n                  value={amount?.toString()||0}\n                  onChange={e=>setAmount(parseInt(e.target.value)||0)}\n                  />\n                </Form.Group>\n              </Form>\n            </Card.Body>\n          </Card>\n        </FuncPanel>\n      </Col>\n      <Col xs=\"auto\" style={{display: \"flex\"}}>\n        <div style={{display: \"flex\", justifyContent: \"center\", flex: 1, flexDirection: \"column\"}}>\n          <FuncPanel>\n            1. <ButtonRequest \n              type=\"find\"\n              title=\"Find credentials\"\n              onClick={handleFind} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            2. <ButtonRequest \n              type=\"prepare\"\n              title=\"Prepare\"\n              onClick={handlePrepare} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            3. <ButtonRequest \n              type=\"confirm\"\n              title=\"Confirm\"\n              onClick={handleConfirm} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n          <FuncPanel>\n            3<span style={{position: 'absolute'}}>*</span>. <ButtonRequest \n              type=\"cancel\"\n              title=\"Cancel\"\n              onClick={handleCancel} \n              {...{availableRequests, currentRequest}}\n            />\n          </FuncPanel>\n        </div>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Card>\n          <Card.Header>\n            Transaction Content\n          </Card.Header>\n          <Card.Body>\n            <div>\n              {txn?.txID()}\n            </div>\n            <div>\n              {\n                groupCTxn \n                ? \"Raw TxID in group: \"+encode(groupCTxn.rawTxID())\n                : \"\"\n              }\n            </div>\n            <pre>\n              {JSON.stringify(JSON.parse(txn?.toString()||\"{}\"), null, 2)}\n            </pre>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  </Container>\n}\n","import React from 'react'\nimport styles from './App.module.css'\nimport { AlgorandClient } from './features/algoclient/AlgoClient'\nimport { Account } from './features/account/Account'\nimport { Status } from './features/status/Status'\nimport { Contract } from './features/contract/Contract'\nimport { Auth } from './features/auth/Auth'\nimport { Col, Container, Row, Tab, Tabs } from 'react-bootstrap'\nimport classNames from \"classnames\"\n\nfunction TabBase(props: {children: React.ReactNode}) {\n  return <div className={\n    classNames(\n      styles.tabBase, \n      \"border-bottom\", \"border-left\", \"border-right\"\n    )}>\n    {props.children}\n  </div>\n}\n\nfunction App() {\n  return <div className={styles.main}>\n    <Container>\n      <Row>\n        <Col><h3>Algorand PassDApp</h3></Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Status/>\n        </Col>\n        <Col sm={9}>\n          <Tabs defaultActiveKey=\"algoclient\">\n            <Tab eventKey=\"algoclient\" title=\"Node Provider\">\n              <TabBase>\n                <AlgorandClient/>\n              </TabBase>\n            </Tab>\n            <Tab eventKey=\"account\" title=\"Setup\">\n              <TabBase>\n                <Account/>\n              </TabBase>\n              <TabBase>\n                <Contract/>\n              </TabBase>\n            </Tab>\n            <Tab eventKey=\"auth\" title=\"Transaction Authentication\">\n              <TabBase>\n                <Auth/>\n              </TabBase>\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n    </Container>\n  </div>\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport algorandClientReducer from '../features/algoclient/algoClientSlice'\nimport accountReducer from '../features/account/accountSlice'\nimport statusReducer from '../features/status/statusSlice'\nimport contractReducer from '../features/contract/contractSlice'\nimport authReducer from '../features/auth/authSlice'\n\nexport const store = configureStore({\n  reducer: {\n    status: statusReducer,\n    account: accountReducer,\n    contract: contractReducer,\n    algorandClient: algorandClientReducer,\n    auth: authReducer\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = Promise<void>> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\",\"tabBase\":\"App_tabBase__3Ir4k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hostPlace\":\"Status_hostPlace__3HjW4\",\"statePlace\":\"Status_statePlace__3QdJu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setupButton\":\"Contract_setupButton__24urr\",\"generatePasswd\":\"Contract_generatePasswd__JAHeY\"};"],"sourceRoot":""}